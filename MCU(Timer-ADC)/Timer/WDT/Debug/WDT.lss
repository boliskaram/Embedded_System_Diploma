
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000582  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030a  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <WDT_ON>:
#include <util/delay.h>



void WDT_ON(){
	 WDTCR |= (1 << WDE) |(1 << WDP1) |(1 << WDP2);
  6c:	81 b5       	in	r24, 0x21	; 33
  6e:	8e 60       	ori	r24, 0x0E	; 14
  70:	81 bd       	out	0x21, r24	; 33
	 WDTCR &= ~(1 << WDP0);
  72:	81 b5       	in	r24, 0x21	; 33
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	81 bd       	out	0x21, r24	; 33
  78:	08 95       	ret

0000007a <WDT_OFF>:
}
void WDT_OFF(){
	WDTCR |= (1 << WDE) |(1 << WDTOE);
  7a:	81 b5       	in	r24, 0x21	; 33
  7c:	88 61       	ori	r24, 0x18	; 24
  7e:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
  80:	11 bc       	out	0x21, r1	; 33
  82:	08 95       	ret

00000084 <main>:

#define LED_DDR			DDRC
#define LED_PORT		PORTC
int main(void)
{
	LED_DDR |= 1 << 0 ;
  84:	a0 9a       	sbi	0x14, 0	; 20
	//_delay_ms(500);
    /* Replace with your application code */
    while (1) 
    {
		WDT_ON();
		LED_PORT ^= 1<<0;
  86:	c1 e0       	ldi	r28, 0x01	; 1
	LED_DDR |= 1 << 0 ;
	//_delay_ms(500);
    /* Replace with your application code */
    while (1) 
    {
		WDT_ON();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <WDT_ON>
		LED_PORT ^= 1<<0;
  8c:	85 b3       	in	r24, 0x15	; 21
  8e:	8c 27       	eor	r24, r28
  90:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	83 ed       	ldi	r24, 0xD3	; 211
  96:	90 e3       	ldi	r25, 0x30	; 48
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x14>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x1e>
  a2:	00 00       	nop
		_delay_ms(2000);
		WDT_OFF();
  a4:	0e 94 3d 00 	call	0x7a	; 0x7a <WDT_OFF>
  a8:	ef cf       	rjmp	.-34     	; 0x88 <main+0x4>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

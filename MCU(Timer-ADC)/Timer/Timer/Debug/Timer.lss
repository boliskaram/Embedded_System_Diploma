
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b43  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047c  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000341  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_10>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TOIE_callback>:
#include "MCAL/Timer/Timer.h"

extern uint8_t u8_TOVNum;

void TOIE_callback(){
	PORTA = ~PORTA;
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	80 95       	com	r24
  80:	8b bb       	out	0x1b, r24	; 27
  82:	08 95       	ret

00000084 <main>:
}

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0x8>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	sei();
  94:	78 94       	sei
	TIMER0_CALLBACK_CompareMatch_INTERRUPT(TOIE_callback);
  96:	8e e3       	ldi	r24, 0x3E	; 62
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 93 00 	call	0x126	; 0x126 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>
	TIMER0_CONFIG_t T0CFG = {CTC,PRESCALING_CLK8,TOIE_DISABLE,OCIE_ENABLE};
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8a 83       	std	Y+2, r24	; 0x02
  a6:	1b 82       	std	Y+3, r1	; 0x03
  a8:	8c 83       	std	Y+4, r24	; 0x04
	/*T0CFG.MODE=CTC;
	T0CFG.CLK= PRESCALING_CLK8;
	T0CFG.OCM_Interrupt = OCIE_ENABLE ; 
	T0CFG.TOVF_Interrupt = TOIE_DISABLE;*/
	TIMER0_SetCompareVal(0xF0);
  aa:	80 ef       	ldi	r24, 0xF0	; 240
  ac:	0e 94 90 00 	call	0x120	; 0x120 <TIMER0_SetCompareVal>
	TIMER0_Init(&T0CFG);   
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 5d 00 	call	0xba	; 0xba <TIMER0_Init>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x34>

000000ba <TIMER0_Init>:
	u8_TOVNum = u8_TickNum;
	return u8_Retval;
}

void TIMER0_CALLBACK_Overflow_INTERRUPT(p_VfunV callback){
	Callback_OVF = callback;
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	69 f1       	breq	.+90     	; 0x118 <TIMER0_Init+0x5e>
  be:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <G_Timer_Config+0x1>
  c2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <G_Timer_Config>
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	98 2f       	mov	r25, r24
  cc:	97 7f       	andi	r25, 0xF7	; 247
  ce:	19 f4       	brne	.+6      	; 0xd6 <TIMER0_Init+0x1c>
  d0:	93 b7       	in	r25, 0x33	; 51
  d2:	89 2b       	or	r24, r25
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <G_Timer_Config>
  da:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <G_Timer_Config+0x1>
  de:	81 81       	ldd	r24, Z+1	; 0x01
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	18 f4       	brcc	.+6      	; 0xea <TIMER0_Init+0x30>
  e4:	93 b7       	in	r25, 0x33	; 51
  e6:	89 2b       	or	r24, r25
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <G_Timer_Config>
  ee:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <G_Timer_Config+0x1>
  f2:	83 81       	ldd	r24, Z+3	; 0x03
  f4:	98 2f       	mov	r25, r24
  f6:	9d 7f       	andi	r25, 0xFD	; 253
  f8:	19 f4       	brne	.+6      	; 0x100 <TIMER0_Init+0x46>
  fa:	99 b7       	in	r25, 0x39	; 57
  fc:	89 2b       	or	r24, r25
  fe:	89 bf       	out	0x39, r24	; 57
 100:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <G_Timer_Config>
 104:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <G_Timer_Config+0x1>
 108:	82 81       	ldd	r24, Z+2	; 0x02
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	38 f4       	brcc	.+14     	; 0x11c <TIMER0_Init+0x62>
 10e:	99 b7       	in	r25, 0x39	; 57
 110:	89 2b       	or	r24, r25
 112:	89 bf       	out	0x39, r24	; 57
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <TIMER0_SetCompareVal>:
 120:	8c bf       	out	0x3c, r24	; 60
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret

00000126 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
}
void TIMER0_CALLBACK_CompareMatch_INTERRUPT(p_VfunV callback){
	Callback_CM = callback;
 126:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Callback_CM+0x1>
 12a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Callback_CM>
 12e:	08 95       	ret

00000130 <__vector_11>:
}


ISR(TIMER0_OVF_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	u8_TOVNum++;
 152:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_TOVNum>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <u8_TOVNum>
	Callback_OVF();
 15c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 160:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 164:	09 95       	icall
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_10>:
ISR(TIMER0_COMP_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	Callback_CM();
 1aa:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Callback_CM>
 1ae:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Callback_CM+0x1>
 1b2:	09 95       	icall
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>

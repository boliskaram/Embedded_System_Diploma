
L5_U8_SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001018  08001018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001038  08001038  00011040  2**0
                  CONTENTS
  4 .ARM          00000000  08001038  08001038  00011040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001038  08001040  00011040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800103c  0800103c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08001040  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001040  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e74  00000000  00000000  00011069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008bd  00000000  00000000  00012edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d60  00000000  00000000  0001379a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00014500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00014730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000db8  00000000  00000000  000148f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002db5  00000000  00000000  000156b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a274  00000000  00000000  00018465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000226d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006f8  00000000  00000000  0002272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001000 	.word	0x08001000

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001000 	.word	0x08001000

08000170 <EXTI0_IRQHandler>:
//==========================================================
//						ISR Functions
//==========================================================


void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//	clear PR by w1
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	if(EXTI->PR &  1<<5) {EXTI->PR |= (1<<5);  GP_IRQ_CallBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR &  1<<6) {EXTI->PR |= (1<<6);  GP_IRQ_CallBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR &  1<<7) {EXTI->PR |= (1<<7);  GP_IRQ_CallBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR &  1<<8) {EXTI->PR |= (1<<8);  GP_IRQ_CallBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR &  1<<9) {EXTI->PR |= (1<<9);  GP_IRQ_CallBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR &  1<<10) {EXTI->PR |= (1<<10);  GP_IRQ_CallBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR &  1<<11) {EXTI->PR |= (1<<11);  GP_IRQ_CallBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR &  1<<12) {EXTI->PR |= (1<<12);  GP_IRQ_CallBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR &  1<<13) {EXTI->PR |= (1<<13);  GP_IRQ_CallBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR &  1<<14) {EXTI->PR |= (1<<14);  GP_IRQ_CallBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR &  1<<15) {EXTI->PR |= (1<<15);  GP_IRQ_CallBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <MCAL_RCC_GetSYSCLKFreq>:
#include "stm32f103c6_RCC_driver.h"


const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};
const uint8_t APBPrescTable[16] = {0,0,0,0,1,2,3,4};
uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

	switch( (RCC->CFGR >> 2) & 0b11){
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	f003 0303 	and.w	r3, r3, #3
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d00a      	beq.n	80003b8 <MCAL_RCC_GetSYSCLKFreq+0x28>
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d80a      	bhi.n	80003bc <MCAL_RCC_GetSYSCLKFreq+0x2c>
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d002      	beq.n	80003b0 <MCAL_RCC_GetSYSCLKFreq+0x20>
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d002      	beq.n	80003b4 <MCAL_RCC_GetSYSCLKFreq+0x24>
 80003ae:	e005      	b.n	80003bc <MCAL_RCC_GetSYSCLKFreq+0x2c>
	case 0:
		return HSI_RC_CLK;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 80003b2:	e003      	b.n	80003bc <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	case 1:
		return HSE_CLK;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 80003b6:	e001      	b.n	80003bc <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	case 2:
		return 16000000 ;
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 80003ba:	e7ff      	b.n	80003bc <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	}
}
 80003bc:	4618      	mov	r0, r3
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	007a1200 	.word	0x007a1200
 80003cc:	00f42400 	.word	0x00f42400

080003d0 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

	return ( MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[ (RCC->CFGR >> 4) & 0xf ] );
 80003d4:	f7ff ffdc 	bl	8000390 <MCAL_RCC_GetSYSCLKFreq>
 80003d8:	4602      	mov	r2, r0
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	091b      	lsrs	r3, r3, #4
 80003e0:	f003 030f 	and.w	r3, r3, #15
 80003e4:	4903      	ldr	r1, [pc, #12]	; (80003f4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80003e6:	5ccb      	ldrb	r3, [r1, r3]
 80003e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	08001018 	.word	0x08001018

080003f8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ (RCC->CFGR >> 8) & 0b111 ] );
 80003fc:	f7ff ffe8 	bl	80003d0 <MCAL_RCC_GetHCLKFreq>
 8000400:	4602      	mov	r2, r0
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	f003 0307 	and.w	r3, r3, #7
 800040c:	4903      	ldr	r1, [pc, #12]	; (800041c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800040e:	5ccb      	ldrb	r3, [r1, r3]
 8000410:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000414:	4618      	mov	r0, r3
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	08001028 	.word	0x08001028

08000420 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ (RCC->CFGR >> 11) & 0b111 ] );
 8000424:	f7ff ffd4 	bl	80003d0 <MCAL_RCC_GetHCLKFreq>
 8000428:	4602      	mov	r2, r0
 800042a:	4b05      	ldr	r3, [pc, #20]	; (8000440 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	0adb      	lsrs	r3, r3, #11
 8000430:	f003 0307 	and.w	r3, r3, #7
 8000434:	4903      	ldr	r1, [pc, #12]	; (8000444 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000436:	5ccb      	ldrb	r3, [r1, r3]
 8000438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800043c:	4618      	mov	r0, r3
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	08001028 	.word	0x08001028

08000448 <MCAL_SPI_Init>:

#define SPI1_INDEX		0
#define SPI2_INDEX		1


void MCAL_SPI_Init(SPI_Typedef *SPIx,SPI_Config_t *SPI_Config){
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]

	uint16_t TempRegCR1 = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	81fb      	strh	r3, [r7, #14]
	uint16_t TempRegCR2 = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a3c      	ldr	r2, [pc, #240]	; (8000550 <MCAL_SPI_Init+0x108>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d109      	bne.n	8000476 <MCAL_SPI_Init+0x2e>

		G_SPI_Config[SPI1_INDEX] =	SPI_Config;
 8000462:	4a3c      	ldr	r2, [pc, #240]	; (8000554 <MCAL_SPI_Init+0x10c>)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	6013      	str	r3, [r2, #0]
		RCC_EN_CLK_SPI1();
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <MCAL_SPI_Init+0x110>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a3a      	ldr	r2, [pc, #232]	; (8000558 <MCAL_SPI_Init+0x110>)
 800046e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	e00c      	b.n	8000490 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a38      	ldr	r2, [pc, #224]	; (800055c <MCAL_SPI_Init+0x114>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d108      	bne.n	8000490 <MCAL_SPI_Init+0x48>

		G_SPI_Config[SPI2_INDEX] =	SPI_Config ;
 800047e:	4a35      	ldr	r2, [pc, #212]	; (8000554 <MCAL_SPI_Init+0x10c>)
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	6053      	str	r3, [r2, #4]
		RCC_EN_CLK_SPI2();
 8000484:	4b34      	ldr	r3, [pc, #208]	; (8000558 <MCAL_SPI_Init+0x110>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a33      	ldr	r2, [pc, #204]	; (8000558 <MCAL_SPI_Init+0x110>)
 800048a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048e:	61d3      	str	r3, [r2, #28]
	}

	//Bit 6 SPE: SPI enable
	TempRegCR1 |= (0x1<<6);
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000496:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->Device_Mode ;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	881a      	ldrh	r2, [r3, #0]
 800049c:	89fb      	ldrh	r3, [r7, #14]
 800049e:	4313      	orrs	r3, r2
 80004a0:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->Comm_Mode ;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	885a      	ldrh	r2, [r3, #2]
 80004a6:	89fb      	ldrh	r3, [r7, #14]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->Frame_Format ;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	889a      	ldrh	r2, [r3, #4]
 80004b0:	89fb      	ldrh	r3, [r7, #14]
 80004b2:	4313      	orrs	r3, r2
 80004b4:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->Data_Size ;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	88da      	ldrh	r2, [r3, #6]
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	4313      	orrs	r3, r2
 80004be:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->CLKPolarity ;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	891a      	ldrh	r2, [r3, #8]
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->CLKPhase ;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	895a      	ldrh	r2, [r3, #10]
 80004ce:	89fb      	ldrh	r3, [r7, #14]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	81fb      	strh	r3, [r7, #14]

	TempRegCR1 |= SPI_Config->SPI_BAUDRATE_PS ;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	89da      	ldrh	r2, [r3, #14]
 80004d8:	89fb      	ldrh	r3, [r7, #14]
 80004da:	4313      	orrs	r3, r2
 80004dc:	81fb      	strh	r3, [r7, #14]


	if(SPI_Config->NSS == SPI_NSS_HARDWARE_MASTER_SS_output_EN){
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	899b      	ldrh	r3, [r3, #12]
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d105      	bne.n	80004f2 <MCAL_SPI_Init+0xaa>

		TempRegCR2 |= SPI_Config->NSS ;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	899a      	ldrh	r2, [r3, #12]
 80004ea:	89bb      	ldrh	r3, [r7, #12]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
 80004f0:	e004      	b.n	80004fc <MCAL_SPI_Init+0xb4>

		TempRegCR2 &=  SPI_Config->NSS ;

	}else{

		TempRegCR1 |= SPI_Config->NSS ;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	899a      	ldrh	r2, [r3, #12]
 80004f6:	89fb      	ldrh	r3, [r7, #14]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	81fb      	strh	r3, [r7, #14]
	}

	if(SPI_Config->IRQ_EN != SPI_IRQ_EN_NONE){
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	8a1b      	ldrh	r3, [r3, #16]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d019      	beq.n	8000538 <MCAL_SPI_Init+0xf0>

		TempRegCR2 |= SPI_Config->IRQ_EN;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	8a1a      	ldrh	r2, [r3, #16]
 8000508:	89bb      	ldrh	r3, [r7, #12]
 800050a:	4313      	orrs	r3, r2
 800050c:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <MCAL_SPI_Init+0x108>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <MCAL_SPI_Init+0xdc>

			NVIC_IRQ35_SPI1_EN;
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MCAL_SPI_Init+0x118>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <MCAL_SPI_Init+0x118>)
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	6013      	str	r3, [r2, #0]
 8000522:	e009      	b.n	8000538 <MCAL_SPI_Init+0xf0>
		}
		else if(SPIx == SPI1){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <MCAL_SPI_Init+0x108>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d105      	bne.n	8000538 <MCAL_SPI_Init+0xf0>

			NVIC_IRQ36_SPI2_EN;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MCAL_SPI_Init+0x118>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <MCAL_SPI_Init+0x118>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = TempRegCR1 ;
 8000538:	89fa      	ldrh	r2, [r7, #14]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = TempRegCR2 ;
 800053e:	89ba      	ldrh	r2, [r7, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	605a      	str	r2, [r3, #4]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40013000 	.word	0x40013000
 8000554:	20000058 	.word	0x20000058
 8000558:	40021000 	.word	0x40021000
 800055c:	40003800 	.word	0x40003800
 8000560:	e000e104 	.word	0xe000e104

08000564 <MCAL_SPI_Set_Pins>:
	*pRxBuffer = SPIx->DR ;
}



void MCAL_SPI_Set_Pins(SPI_Typedef *SPIx){
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t PinCFG;
	if(SPIx == SPI1){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a73      	ldr	r2, [pc, #460]	; (800073c <MCAL_SPI_Set_Pins+0x1d8>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d169      	bne.n	8000648 <MCAL_SPI_Set_Pins+0xe4>
		//PA4 : NSS
		//PA5 : SCK
		//PA6 : MISO
		//PA7 : MOSI
		if(G_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_MODE_MASTER){
 8000574:	4b72      	ldr	r3, [pc, #456]	; (8000740 <MCAL_SPI_Set_Pins+0x1dc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	2b04      	cmp	r3, #4
 800057c:	d134      	bne.n	80005e8 <MCAL_SPI_Set_Pins+0x84>
			//PA4 : NSS
			switch(G_SPI_Config[SPI1_INDEX]->NSS)
 800057e:	4b70      	ldr	r3, [pc, #448]	; (8000740 <MCAL_SPI_Set_Pins+0x1dc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	899b      	ldrh	r3, [r3, #12]
 8000584:	2b04      	cmp	r3, #4
 8000586:	d10c      	bne.n	80005a2 <MCAL_SPI_Set_Pins+0x3e>
			{
			case SPI_NSS_HARDWARE_MASTER_SS_output_EN:

				PinCFG.GPIO_PinNumber = GPIO_PIN_4;
 8000588:	2310      	movs	r3, #16
 800058a:	81bb      	strh	r3, [r7, #12]
				PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800058c:	2306      	movs	r3, #6
 800058e:	73bb      	strb	r3, [r7, #14]
				PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	4619      	mov	r1, r3
 800059a:	486a      	ldr	r0, [pc, #424]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 800059c:	f000 fba4 	bl	8000ce8 <MCAL_GPIO_Init>

				break;
 80005a0:	bf00      	nop
				break;
			}


			//PA5 : SCK
			PinCFG.GPIO_PinNumber = GPIO_PIN_5;
 80005a2:	2320      	movs	r3, #32
 80005a4:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80005a6:	2306      	movs	r3, #6
 80005a8:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 80005aa:	2301      	movs	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	4863      	ldr	r0, [pc, #396]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 80005b6:	f000 fb97 	bl	8000ce8 <MCAL_GPIO_Init>


			//PA6 : MISO
			PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 80005ba:	2340      	movs	r3, #64	; 0x40
 80005bc:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80005be:	2301      	movs	r3, #1
 80005c0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	485e      	ldr	r0, [pc, #376]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 80005ca:	f000 fb8d 	bl	8000ce8 <MCAL_GPIO_Init>

			//PA7 : MOSI
			PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80005d2:	2306      	movs	r3, #6
 80005d4:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	4858      	ldr	r0, [pc, #352]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 80005e2:	f000 fb81 	bl	8000ce8 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &PinCFG);
		}

	}

}
 80005e6:	e0a4      	b.n	8000732 <MCAL_SPI_Set_Pins+0x1ce>
			if(G_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_HARDWARE_SLAVE){
 80005e8:	4b55      	ldr	r3, [pc, #340]	; (8000740 <MCAL_SPI_Set_Pins+0x1dc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	899b      	ldrh	r3, [r3, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d109      	bne.n	8000606 <MCAL_SPI_Set_Pins+0xa2>
				PinCFG.GPIO_PinNumber = GPIO_PIN_4;
 80005f2:	2310      	movs	r3, #16
 80005f4:	81bb      	strh	r3, [r7, #12]
				PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCFG);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	4850      	ldr	r0, [pc, #320]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 8000602:	f000 fb71 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_5;
 8000606:	2320      	movs	r3, #32
 8000608:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800060a:	2301      	movs	r3, #1
 800060c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	484b      	ldr	r0, [pc, #300]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 8000616:	f000 fb67 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 800061a:	2340      	movs	r3, #64	; 0x40
 800061c:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800061e:	2306      	movs	r3, #6
 8000620:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	4619      	mov	r1, r3
 800062c:	4845      	ldr	r0, [pc, #276]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 800062e:	f000 fb5b 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000636:	2301      	movs	r3, #1
 8000638:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4619      	mov	r1, r3
 8000640:	4840      	ldr	r0, [pc, #256]	; (8000744 <MCAL_SPI_Set_Pins+0x1e0>)
 8000642:	f000 fb51 	bl	8000ce8 <MCAL_GPIO_Init>
}
 8000646:	e074      	b.n	8000732 <MCAL_SPI_Set_Pins+0x1ce>
	else if (SPIx == SPI2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <MCAL_SPI_Set_Pins+0x1e4>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d170      	bne.n	8000732 <MCAL_SPI_Set_Pins+0x1ce>
		if(G_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_MODE_MASTER){
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <MCAL_SPI_Set_Pins+0x1dc>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	2b04      	cmp	r3, #4
 8000658:	d138      	bne.n	80006cc <MCAL_SPI_Set_Pins+0x168>
			switch(G_SPI_Config[SPI2_INDEX]->NSS)
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MCAL_SPI_Set_Pins+0x1dc>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	899b      	ldrh	r3, [r3, #12]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d10d      	bne.n	8000680 <MCAL_SPI_Set_Pins+0x11c>
				PinCFG.GPIO_PinNumber = GPIO_PIN_12;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	81bb      	strh	r3, [r7, #12]
				PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800066a:	2306      	movs	r3, #6
 800066c:	73bb      	strb	r3, [r7, #14]
				PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 800066e:	2301      	movs	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4834      	ldr	r0, [pc, #208]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 800067a:	f000 fb35 	bl	8000ce8 <MCAL_GPIO_Init>
				break;
 800067e:	bf00      	nop
			PinCFG.GPIO_PinNumber = GPIO_PIN_13;
 8000680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000684:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000686:	2306      	movs	r3, #6
 8000688:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 800068a:	2301      	movs	r3, #1
 800068c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCFG);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4619      	mov	r1, r3
 8000694:	482d      	ldr	r0, [pc, #180]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 8000696:	f000 fb27 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_14;
 800069a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800069e:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCFG);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4828      	ldr	r0, [pc, #160]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 80006ac:	f000 fb1c 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_15;
 80006b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006b4:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80006b6:	2306      	movs	r3, #6
 80006b8:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCFG);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 80006c6:	f000 fb0f 	bl	8000ce8 <MCAL_GPIO_Init>
}
 80006ca:	e032      	b.n	8000732 <MCAL_SPI_Set_Pins+0x1ce>
			if(G_SPI_Config[SPI2_INDEX]->NSS == SPI_NSS_HARDWARE_SLAVE){
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MCAL_SPI_Set_Pins+0x1dc>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	899b      	ldrh	r3, [r3, #12]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10a      	bne.n	80006ec <MCAL_SPI_Set_Pins+0x188>
				PinCFG.GPIO_PinNumber = GPIO_PIN_12;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	81bb      	strh	r3, [r7, #12]
				PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80006dc:	2301      	movs	r3, #1
 80006de:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCFG);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4819      	ldr	r0, [pc, #100]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 80006e8:	f000 fafe 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_13;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80006f2:	2301      	movs	r3, #1
 80006f4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCFG);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 80006fe:	f000 faf3 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_14;
 8000702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000706:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000708:	2306      	movs	r3, #6
 800070a:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10;
 800070c:	2301      	movs	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4619      	mov	r1, r3
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 8000718:	f000 fae6 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_15;
 800071c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000720:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <MCAL_SPI_Set_Pins+0x1e8>)
 800072e:	f000 fadb 	bl	8000ce8 <MCAL_GPIO_Init>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40013000 	.word	0x40013000
 8000740:	20000058 	.word	0x20000058
 8000744:	40010800 	.word	0x40010800
 8000748:	40003800 	.word	0x40003800
 800074c:	40010c00 	.word	0x40010c00

08000750 <MCAL_SPI_Tx_Rx>:


void MCAL_SPI_Tx_Rx(SPI_Typedef *SPIx,uint16_t *pBuffer , enum PollingMechism PollingEN){
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	4613      	mov	r3, r2
 800075c:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == Polling_enable)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d106      	bne.n	8000772 <MCAL_SPI_Tx_Rx+0x22>
		while(!((SPIx)->SR & SPI_SR_TXE));
 8000764:	bf00      	nop
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <MCAL_SPI_Tx_Rx+0x16>
	SPIx->DR = *pBuffer ;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	60da      	str	r2, [r3, #12]

	if(PollingEN == Polling_enable)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d106      	bne.n	8000790 <MCAL_SPI_Tx_Rx+0x40>
		while(!((SPIx)->SR & SPI_SR_RXNE));
 8000782:	bf00      	nop
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f9      	beq.n	8000784 <MCAL_SPI_Tx_Rx+0x34>
	*pBuffer = SPIx->DR ;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	b29a      	uxth	r2, r3
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	801a      	strh	r2, [r3, #0]

}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <SPI1_IRQHandler>:

//===============================================================
//       IRQ
//===============================================================

void SPI1_IRQHandler(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

	struct S_IRQ_SPI irq_src;

	irq_src.TXE = ( (SPI1->SR & (1<<1)) >> 1 );
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <SPI1_IRQHandler+0x54>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	085b      	lsrs	r3, r3, #1
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	793b      	ldrb	r3, [r7, #4]
 80007b8:	f362 0300 	bfi	r3, r2, #0, #1
 80007bc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0)) >> 0 );
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <SPI1_IRQHandler+0x54>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	793b      	ldrb	r3, [r7, #4]
 80007ca:	f362 0341 	bfi	r3, r2, #1, #1
 80007ce:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4)) >> 4 );
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <SPI1_IRQHandler+0x54>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	793b      	ldrb	r3, [r7, #4]
 80007de:	f362 0382 	bfi	r3, r2, #2, #1
 80007e2:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SPI1_IRQHandler+0x58>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	7938      	ldrb	r0, [r7, #4]
 80007ec:	4798      	blx	r3
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40013000 	.word	0x40013000
 80007fc:	20000058 	.word	0x20000058

08000800 <SPI2_IRQHandler>:



void SPI2_IRQHandler(){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

	struct S_IRQ_SPI irq_src;

	irq_src.TXE = ( (SPI1->SR & (1<<1)) >> 1 );
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <SPI2_IRQHandler+0x54>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	085b      	lsrs	r3, r3, #1
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	793b      	ldrb	r3, [r7, #4]
 8000814:	f362 0300 	bfi	r3, r2, #0, #1
 8000818:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0)) >> 0 );
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <SPI2_IRQHandler+0x54>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	793b      	ldrb	r3, [r7, #4]
 8000826:	f362 0341 	bfi	r3, r2, #1, #1
 800082a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4)) >> 4 );
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <SPI2_IRQHandler+0x54>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	793b      	ldrb	r3, [r7, #4]
 800083a:	f362 0382 	bfi	r3, r2, #2, #1
 800083e:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SPI2_IRQHandler+0x58>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	7938      	ldrb	r0, [r7, #4]
 8000848:	4798      	blx	r3
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40013000 	.word	0x40013000
 8000858:	20000058 	.word	0x20000058

0800085c <MCAL_USART_Init>:
#include "stm32f103c6_USART_driver.h"

USART_Config_t* G_USART_Config = NULL;


void MCAL_USART_Init(USART_Typedef *USARTx,USART_Config_t* USART_Config){
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]



	G_USART_Config = USART_Config;
 8000866:	4a57      	ldr	r2, [pc, #348]	; (80009c4 <MCAL_USART_Init+0x168>)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	6013      	str	r3, [r2, #0]

	uint32_t PCLK , BRR;

	// enalbe clock for each uart
	if(USARTx == USART1){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a56      	ldr	r2, [pc, #344]	; (80009c8 <MCAL_USART_Init+0x16c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <MCAL_USART_Init+0x26>
		RCC_EN_CLK_USART1();
 8000874:	4b55      	ldr	r3, [pc, #340]	; (80009cc <MCAL_USART_Init+0x170>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a54      	ldr	r2, [pc, #336]	; (80009cc <MCAL_USART_Init+0x170>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	e014      	b.n	80008ac <MCAL_USART_Init+0x50>
	}
	else if(USARTx == USART2){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MCAL_USART_Init+0x174>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <MCAL_USART_Init+0x3c>
		RCC_EN_CLK_USART2();
 800088a:	4b50      	ldr	r3, [pc, #320]	; (80009cc <MCAL_USART_Init+0x170>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a4f      	ldr	r2, [pc, #316]	; (80009cc <MCAL_USART_Init+0x170>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	e009      	b.n	80008ac <MCAL_USART_Init+0x50>
	}
	else if(USARTx == USART3){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a4e      	ldr	r2, [pc, #312]	; (80009d4 <MCAL_USART_Init+0x178>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d105      	bne.n	80008ac <MCAL_USART_Init+0x50>
		RCC_EN_CLK_USART3();
 80008a0:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <MCAL_USART_Init+0x170>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	4a49      	ldr	r2, [pc, #292]	; (80009cc <MCAL_USART_Init+0x170>)
 80008a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008aa:	61d3      	str	r3, [r2, #28]
	}

	// enable uart
	USARTx->CR1 |= 1<<13;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60da      	str	r2, [r3, #12]

	//enable each tx and rx
	USARTx->CR1 |= USART_Config->USART_Mode;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	7812      	ldrb	r2, [r2, #0]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	60da      	str	r2, [r3, #12]

	// set payload length
	USARTx->CR1 |= USART_Config->Payload_Length;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	7a12      	ldrb	r2, [r2, #8]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	60da      	str	r2, [r3, #12]

	// set parity
	USARTx->CR1 |= USART_Config->Parity;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	7a52      	ldrb	r2, [r2, #9]
 80008dc:	431a      	orrs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	60da      	str	r2, [r3, #12]

	// set stop bits
	USARTx->CR2 |= USART_Config->StopBits;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	7a92      	ldrb	r2, [r2, #10]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	611a      	str	r2, [r3, #16]

	// set flow control
	USARTx->CR3 |= USART_Config->HwFlowCtl;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	7ad2      	ldrb	r2, [r2, #11]
 80008f8:	431a      	orrs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	615a      	str	r2, [r3, #20]

	// config Baud rate
	//	PCLK2 for UART1
	//	PCLK1 for UART2,3

	if(USARTx == USART1){
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <MCAL_USART_Init+0x16c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d103      	bne.n	800090e <MCAL_USART_Init+0xb2>
		PCLK = MCAL_RCC_GetPCLK2Freq();
 8000906:	f7ff fd8b 	bl	8000420 <MCAL_RCC_GetPCLK2Freq>
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	e002      	b.n	8000914 <MCAL_USART_Init+0xb8>
	}
	else
	{
		PCLK = MCAL_RCC_GetPCLK1Freq();
 800090e:	f7ff fd73 	bl	80003f8 <MCAL_RCC_GetPCLK1Freq>
 8000912:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BBR_Register(PCLK,USART_Config->BaudRate);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000920:	0119      	lsls	r1, r3, #4
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	009a      	lsls	r2, r3, #2
 800092c:	441a      	add	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	fbb2 f2f3 	udiv	r2, r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	fbb0 f3f3 	udiv	r3, r0, r3
 8000944:	2064      	movs	r0, #100	; 0x64
 8000946:	fb00 f303 	mul.w	r3, r0, r3
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	4a22      	ldr	r2, [pc, #136]	; (80009d8 <MCAL_USART_Init+0x17c>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	095b      	lsrs	r3, r3, #5
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	430b      	orrs	r3, r1
 800095c:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	609a      	str	r2, [r3, #8]

	//	enable / disable uart

	if(USART_Config->IRQ_EN != USART_IRQ_EN_NONE)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	7b1b      	ldrb	r3, [r3, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d026      	beq.n	80009ba <MCAL_USART_Init+0x15e>
	{
		USARTx->CR1 |= (USART_Config->IRQ_EN) ;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	7b12      	ldrb	r2, [r2, #12]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60da      	str	r2, [r3, #12]
		// enable NVIC
		if(USARTx == USART1){
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MCAL_USART_Init+0x16c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <MCAL_USART_Init+0x134>
			NVIC_IRQ37_USART1_EN;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MCAL_USART_Init+0x180>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MCAL_USART_Init+0x180>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3){
			NVIC_IRQ39_USART3_EN;
		}
	}

}
 800098e:	e014      	b.n	80009ba <MCAL_USART_Init+0x15e>
		else if(USARTx == USART2){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MCAL_USART_Init+0x174>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <MCAL_USART_Init+0x14a>
			NVIC_IRQ38_USART2_EN;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MCAL_USART_Init+0x180>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <MCAL_USART_Init+0x180>)
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	e009      	b.n	80009ba <MCAL_USART_Init+0x15e>
		else if(USARTx == USART3){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <MCAL_USART_Init+0x178>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d105      	bne.n	80009ba <MCAL_USART_Init+0x15e>
			NVIC_IRQ39_USART3_EN;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MCAL_USART_Init+0x180>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <MCAL_USART_Init+0x180>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6013      	str	r3, [r2, #0]
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000060 	.word	0x20000060
 80009c8:	40013800 	.word	0x40013800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40004800 	.word	0x40004800
 80009d8:	51eb851f 	.word	0x51eb851f
 80009dc:	e000e104 	.word	0xe000e104

080009e0 <MCAL_USART_SendData>:
	}
}



void MCAL_USART_SendData(USART_Typedef *USARTx , uint16_t *pTxBuffer,enum Polling_mechism pollingEn){
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71fb      	strb	r3, [r7, #7]

//	uint16_t *pdata;

	if(pollingEn == enable){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d106      	bne.n	8000a02 <MCAL_USART_SendData+0x22>
		while (! (USARTx->SR & 1<<7 ));
 80009f4:	bf00      	nop
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f9      	beq.n	80009f6 <MCAL_USART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}
	else{

		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	605a      	str	r2, [r3, #4]

	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <MCAL_USART_ReceiveData>:
	while(!(USARTx->SR & 1<<6));

}


void MCAL_USART_ReceiveData(USART_Typedef *USARTx, uint16_t *pRxBuffer,enum Polling_mechism pollingEn){
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	4613      	mov	r3, r2
 8000a24:	71fb      	strb	r3, [r7, #7]

	if(pollingEn == enable){
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d106      	bne.n	8000a3a <MCAL_USART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8000a2c:	bf00      	nop
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f9      	beq.n	8000a2e <MCAL_USART_ReceiveData+0x16>
		}

	}
	else{

		if(G_USART_Config->Parity == USART_Parity_NONE){
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MCAL_USART_ReceiveData+0x58>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	7a5b      	ldrb	r3, [r3, #9]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d107      	bne.n	8000a54 <MCAL_USART_ReceiveData+0x3c>

			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF) ;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	801a      	strh	r2, [r3, #0]

			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);

		}
	}
}
 8000a52:	e007      	b.n	8000a64 <MCAL_USART_ReceiveData+0x4c>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	801a      	strh	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000060 	.word	0x20000060

08000a74 <MCAL_USART_GPIO_Set_Pins>:


void MCAL_USART_GPIO_Set_Pins(USART_Typedef * USARTx){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <MCAL_USART_GPIO_Set_Pins+0xb4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d117      	bne.n	8000ab4 <MCAL_USART_GPIO_Set_Pins+0x40>
		//PA10 Rx
		//PA11 CTS
		//PA12 RTS

		//PA9
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a88:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OutputSpeed = GPIO_SPEED_10;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA , &PinCfg);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4824      	ldr	r0, [pc, #144]	; (8000b2c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000a9a:	f000 f925 	bl	8000ce8 <MCAL_GPIO_Init>

		//PA10
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA , &PinCfg);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	481f      	ldr	r0, [pc, #124]	; (8000b2c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000ab0:	f000 f91a 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCfg.GPIO_OutputSpeed = GPIO_SPEED_10;
			MCAL_GPIO_Init(GPIOA , &PinCfg);
		}

	}
	if(USARTx == USART2){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d115      	bne.n	8000ae8 <MCAL_USART_GPIO_Set_Pins+0x74>
		//PA3 Rx
		//PA0 CTS
		//PA1 RTS

		//PA2
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000abc:	2304      	movs	r3, #4
 8000abe:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OutputSpeed = GPIO_SPEED_10;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA , &PinCfg);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000ad0:	f000 f90a 	bl	8000ce8 <MCAL_GPIO_Init>

		//PA3
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA , &PinCfg);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000ae4:	f000 f900 	bl	8000ce8 <MCAL_GPIO_Init>
			PinCfg.GPIO_OutputSpeed = GPIO_SPEED_10;
			MCAL_GPIO_Init(GPIOA , &PinCfg);
		}

	}
	if(USARTx == USART3){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d117      	bne.n	8000b20 <MCAL_USART_GPIO_Set_Pins+0xac>
		//PB11 Rx
		//PB13 CTS
		//PB14 RTS

		//PB10
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000af6:	2306      	movs	r3, #6
 8000af8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OutputSpeed = GPIO_SPEED_10;
 8000afa:	2301      	movs	r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000b06:	f000 f8ef 	bl	8000ce8 <MCAL_GPIO_Init>

		//PB11
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b0e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000b10:	2308      	movs	r3, #8
 8000b12:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB , &PinCfg);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000b1c:	f000 f8e4 	bl	8000ce8 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &PinCfg);
		}

	}

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013800 	.word	0x40013800
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40004800 	.word	0x40004800
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <USART1_IRQHandler>:



void USART1_IRQHandler(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

	G_USART_Config->P_IRQ_CallBack ();
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <USART1_IRQHandler+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	4798      	blx	r3
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000060 	.word	0x20000060

08000b50 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

	G_USART_Config->P_IRQ_CallBack ();
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	4798      	blx	r3
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000060 	.word	0x20000060

08000b64 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

	G_USART_Config->P_IRQ_CallBack ();
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <USART3_IRQHandler+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	4798      	blx	r3
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000060 	.word	0x20000060

08000b78 <Get_CRLH_Postion>:

//=====================================================================
//						Generic Functions
//=====================================================================

uint8_t Get_CRLH_Postion(uint16_t PinNumber){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber){
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b88:	f000 80a5 	beq.w	8000cd6 <Get_CRLH_Postion+0x15e>
 8000b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b90:	f300 80a3 	bgt.w	8000cda <Get_CRLH_Postion+0x162>
 8000b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b98:	f000 809b 	beq.w	8000cd2 <Get_CRLH_Postion+0x15a>
 8000b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ba0:	f300 809b 	bgt.w	8000cda <Get_CRLH_Postion+0x162>
 8000ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba8:	f000 8091 	beq.w	8000cce <Get_CRLH_Postion+0x156>
 8000bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb0:	f300 8093 	bgt.w	8000cda <Get_CRLH_Postion+0x162>
 8000bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bb8:	f000 8087 	beq.w	8000cca <Get_CRLH_Postion+0x152>
 8000bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bc0:	f300 808b 	bgt.w	8000cda <Get_CRLH_Postion+0x162>
 8000bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bc8:	d07d      	beq.n	8000cc6 <Get_CRLH_Postion+0x14e>
 8000bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bce:	f300 8084 	bgt.w	8000cda <Get_CRLH_Postion+0x162>
 8000bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd6:	d074      	beq.n	8000cc2 <Get_CRLH_Postion+0x14a>
 8000bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bdc:	dc7d      	bgt.n	8000cda <Get_CRLH_Postion+0x162>
 8000bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be2:	d06c      	beq.n	8000cbe <Get_CRLH_Postion+0x146>
 8000be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be8:	dc77      	bgt.n	8000cda <Get_CRLH_Postion+0x162>
 8000bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bee:	d064      	beq.n	8000cba <Get_CRLH_Postion+0x142>
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf4:	dc71      	bgt.n	8000cda <Get_CRLH_Postion+0x162>
 8000bf6:	2b80      	cmp	r3, #128	; 0x80
 8000bf8:	d05d      	beq.n	8000cb6 <Get_CRLH_Postion+0x13e>
 8000bfa:	2b80      	cmp	r3, #128	; 0x80
 8000bfc:	dc6d      	bgt.n	8000cda <Get_CRLH_Postion+0x162>
 8000bfe:	2b20      	cmp	r3, #32
 8000c00:	dc48      	bgt.n	8000c94 <Get_CRLH_Postion+0x11c>
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dd69      	ble.n	8000cda <Get_CRLH_Postion+0x162>
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	d866      	bhi.n	8000cda <Get_CRLH_Postion+0x162>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <Get_CRLH_Postion+0x9c>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c9b 	.word	0x08000c9b
 8000c18:	08000c9f 	.word	0x08000c9f
 8000c1c:	08000cdb 	.word	0x08000cdb
 8000c20:	08000ca3 	.word	0x08000ca3
 8000c24:	08000cdb 	.word	0x08000cdb
 8000c28:	08000cdb 	.word	0x08000cdb
 8000c2c:	08000cdb 	.word	0x08000cdb
 8000c30:	08000ca7 	.word	0x08000ca7
 8000c34:	08000cdb 	.word	0x08000cdb
 8000c38:	08000cdb 	.word	0x08000cdb
 8000c3c:	08000cdb 	.word	0x08000cdb
 8000c40:	08000cdb 	.word	0x08000cdb
 8000c44:	08000cdb 	.word	0x08000cdb
 8000c48:	08000cdb 	.word	0x08000cdb
 8000c4c:	08000cdb 	.word	0x08000cdb
 8000c50:	08000cab 	.word	0x08000cab
 8000c54:	08000cdb 	.word	0x08000cdb
 8000c58:	08000cdb 	.word	0x08000cdb
 8000c5c:	08000cdb 	.word	0x08000cdb
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cdb 	.word	0x08000cdb
 8000c68:	08000cdb 	.word	0x08000cdb
 8000c6c:	08000cdb 	.word	0x08000cdb
 8000c70:	08000cdb 	.word	0x08000cdb
 8000c74:	08000cdb 	.word	0x08000cdb
 8000c78:	08000cdb 	.word	0x08000cdb
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000cdb 	.word	0x08000cdb
 8000c84:	08000cdb 	.word	0x08000cdb
 8000c88:	08000cdb 	.word	0x08000cdb
 8000c8c:	08000cdb 	.word	0x08000cdb
 8000c90:	08000caf 	.word	0x08000caf
 8000c94:	2b40      	cmp	r3, #64	; 0x40
 8000c96:	d00c      	beq.n	8000cb2 <Get_CRLH_Postion+0x13a>
 8000c98:	e01f      	b.n	8000cda <Get_CRLH_Postion+0x162>
	case GPIO_PIN_0 :
		return 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e01e      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e01c      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	e01a      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	e018      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000caa:	2310      	movs	r3, #16
 8000cac:	e016      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000cae:	2314      	movs	r3, #20
 8000cb0:	e014      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000cb2:	2318      	movs	r3, #24
 8000cb4:	e012      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000cb6:	231c      	movs	r3, #28
 8000cb8:	e010      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e00e      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e00c      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	e00a      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	e008      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	e006      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000cce:	2314      	movs	r3, #20
 8000cd0:	e004      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000cd2:	2318      	movs	r3, #24
 8000cd4:	e002      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000cd6:	231c      	movs	r3, #28
 8000cd8:	e000      	b.n	8000cdc <Get_CRLH_Postion+0x164>
		break;
	}
	return 0;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <MCAL_GPIO_Init>:

//=====================================================================
//						APIs Functions Definitions
//=====================================================================

void MCAL_GPIO_Init(GPIO_Typedef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  	Pins from 0 to 7
	//Port configuration register low (GPIOx_CRL) 	Pins from 8 to 15

	volatile uint32_t* configregister = NULL ;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

	configregister  = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	2bff      	cmp	r3, #255	; 0xff
 8000d00:	d801      	bhi.n	8000d06 <MCAL_GPIO_Init+0x1e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	e001      	b.n	8000d0a <MCAL_GPIO_Init+0x22>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Postion(PinConfig->GPIO_PinNumber));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff31 	bl	8000b78 <Get_CRLH_Postion>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	401a      	ands	r2, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ||
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	789b      	ldrb	r3, [r3, #2]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d00b      	beq.n	8000d4a <MCAL_GPIO_Init+0x62>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d007      	beq.n	8000d4a <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP ){
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ||
 8000d3e:	2b07      	cmp	r3, #7
 8000d40:	d003      	beq.n	8000d4a <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP ){
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d10e      	bne.n	8000d68 <MCAL_GPIO_Init+0x80>
		//set CNF0[1:0] MODE0[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_OutputSpeed)) & 0x0f );
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	789b      	ldrb	r3, [r3, #2]
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	78db      	ldrb	r3, [r3, #3]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e02c      	b.n	8000dc2 <MCAL_GPIO_Init+0xda>
	}

	// if pin is input
	// MODE = 00: Input mode (reset state)
	else{
		if(PinConfig->GPIO_Mode == GPIO_MODE_ANALOG || PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO  ){
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <MCAL_GPIO_Init+0x90>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	789b      	ldrb	r3, [r3, #2]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d107      	bne.n	8000d88 <MCAL_GPIO_Init+0xa0>
			//set CNF0[1:0] MODE0[1:0]
			PIN_Config = ((((PinConfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e01c      	b.n	8000dc2 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT){
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	789b      	ldrb	r3, [r3, #2]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d102      	bne.n	8000d96 <MCAL_GPIO_Init+0xae>
			//set CNF0[1:0] MODE0[1:0]
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f );
 8000d90:	2304      	movs	r3, #4
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e015      	b.n	8000dc2 <MCAL_GPIO_Init+0xda>
		}
		else{
			//set CNF0[1:0] MODE0[1:0]
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f );
 8000d96:	2308      	movs	r3, #8
 8000d98:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d107      	bne.n	8000db2 <MCAL_GPIO_Init+0xca>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	e007      	b.n	8000dc2 <MCAL_GPIO_Init+0xda>
			}
			else{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	8812      	ldrh	r2, [r2, #0]
 8000dba:	43d2      	mvns	r2, r2
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//write on CRL,CRH Register
	(*configregister) |= ((PIN_Config) << Get_CRLH_Postion(PinConfig->GPIO_PinNumber));
 8000dc2:	7bfc      	ldrb	r4, [r7, #15]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fed5 	bl	8000b78 <Get_CRLH_Postion>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	fa04 f203 	lsl.w	r2, r4, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}

08000de6 <MCAL_GPIO_WritePin>:
	uint16_t port_value;
	port_value = (uint16_t)GPIOx->IDR;
	return port_value;
}

void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOx, uint16_t PinNumber, uint8_t Value){
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	807b      	strh	r3, [r7, #2]
 8000df2:	4613      	mov	r3, r2
 8000df4:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_PIN_RESET){
 8000df6:	787b      	ldrb	r3, [r7, #1]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <MCAL_GPIO_WritePin+0x1e>

		//		GPIOx->ODR |= PinNumber;
		//		or
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000dfc:	887a      	ldrh	r2, [r7, #2]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	611a      	str	r2, [r3, #16]

		//		GPIOx->ODR &= ~(PinNumber);
		//		or
		GPIOx->BRR = (uint32_t)PinNumber ;
	}
}
 8000e02:	e002      	b.n	8000e0a <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	615a      	str	r2, [r3, #20]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <clock_init>:
#include "stm32f103c6_gpio_driver.h"
#include "stm32f103c6_USART_driver.h"
#include "stm32f103c6_SPI_driver.h"


void clock_init(){
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	RCC_EN_CLK_GPIOA();
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <clock_init+0x30>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <clock_init+0x30>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
	RCC_EN_CLK_GPIOB();
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <clock_init+0x30>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <clock_init+0x30>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
	RCC_EN_CLK_AFIO();
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <clock_init+0x30>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <clock_init+0x30>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6193      	str	r3, [r2, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000

08000e48 <SPI_IRQ_Callback>:


unsigned ch;


void SPI_IRQ_Callback(struct S_IRQ_SPI irq_src){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	7138      	strb	r0, [r7, #4]

#ifdef MCU_Act_As_Slave
	if(irq_src.RXNE){
 8000e50:	793b      	ldrb	r3, [r7, #4]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d009      	beq.n	8000e70 <SPI_IRQ_Callback+0x28>
		MCAL_SPI_Tx_Rx(SPI1, &ch , Polling_disable);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4906      	ldr	r1, [pc, #24]	; (8000e78 <SPI_IRQ_Callback+0x30>)
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <SPI_IRQ_Callback+0x34>)
 8000e62:	f7ff fc75 	bl	8000750 <MCAL_SPI_Tx_Rx>
		MCAL_USART_SendData(USART1, &ch, enable);
 8000e66:	2200      	movs	r2, #0
 8000e68:	4903      	ldr	r1, [pc, #12]	; (8000e78 <SPI_IRQ_Callback+0x30>)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <SPI_IRQ_Callback+0x38>)
 8000e6c:	f7ff fdb8 	bl	80009e0 <MCAL_USART_SendData>
	}
	#endif

}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000064 	.word	0x20000064
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40013800 	.word	0x40013800

08000e84 <UART_IRQ_Callback>:

void UART_IRQ_Callback(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

	MCAL_USART_ReceiveData(USART1, &ch, disable);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <UART_IRQ_Callback+0x3c>)
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <UART_IRQ_Callback+0x40>)
 8000e8e:	f7ff fdc3 	bl	8000a18 <MCAL_USART_ReceiveData>
	MCAL_USART_SendData(USART1, &ch, enable);
 8000e92:	2200      	movs	r2, #0
 8000e94:	490a      	ldr	r1, [pc, #40]	; (8000ec0 <UART_IRQ_Callback+0x3c>)
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <UART_IRQ_Callback+0x40>)
 8000e98:	f7ff fda2 	bl	80009e0 <MCAL_USART_SendData>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <UART_IRQ_Callback+0x44>)
 8000ea2:	f7ff ffa0 	bl	8000de6 <MCAL_GPIO_WritePin>
	 MCAL_SPI_Tx_Rx(SPI1, &ch, Polling_enable);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4905      	ldr	r1, [pc, #20]	; (8000ec0 <UART_IRQ_Callback+0x3c>)
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <UART_IRQ_Callback+0x48>)
 8000eac:	f7ff fc50 	bl	8000750 <MCAL_SPI_Tx_Rx>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <UART_IRQ_Callback+0x44>)
 8000eb6:	f7ff ff96 	bl	8000de6 <MCAL_GPIO_WritePin>

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000064 	.word	0x20000064
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <main>:

int main(void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0

	clock_init();
 8000ed6:	f7ff ff9d 	bl	8000e14 <clock_init>

//	==============================================
//	UART

	USART_Config_t UARTCFG;
	UARTCFG.BaudRate = USART_BaudRate_115200;
 8000eda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ede:	623b      	str	r3, [r7, #32]
	UARTCFG.HwFlowCtl = USART_HwFlowCtl_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	UARTCFG.IRQ_EN = USART_IRQ_EN_RXNEIE;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	UARTCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <main+0x84>)
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	UARTCFG.Parity = USART_Parity_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UARTCFG.Payload_Length = USART_Payload_Length_8B;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UARTCFG.StopBits = USART_StopBits_1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UARTCFG.USART_Mode = USART_Mode_Tx_RX;
 8000f02:	230c      	movs	r3, #12
 8000f04:	773b      	strb	r3, [r7, #28]

	MCAL_USART_Init(USART1, &UARTCFG);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4812      	ldr	r0, [pc, #72]	; (8000f58 <main+0x88>)
 8000f0e:	f7ff fca5 	bl	800085c <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <main+0x88>)
 8000f14:	f7ff fdae 	bl	8000a74 <MCAL_USART_GPIO_Set_Pins>
//	==================================================
//	SPI

	SPI_Config_t SPI1CFG;

	SPI1CFG.CLKPhase = SPI_CLKPhase_2EDGE_1DATA_capture;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	81fb      	strh	r3, [r7, #14]

	SPI1CFG.CLKPolarity = SPI_CLKPolarity_HIGH_idel;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	81bb      	strh	r3, [r7, #12]

	SPI1CFG.Data_Size = SPI_Data_Size_8B ;
 8000f20:	2300      	movs	r3, #0
 8000f22:	817b      	strh	r3, [r7, #10]

	SPI1CFG.Frame_Format = SPI_Frame_Format_MSB_SEND_FIRST ;
 8000f24:	2300      	movs	r3, #0
 8000f26:	813b      	strh	r3, [r7, #8]

	SPI1CFG.SPI_BAUDRATE_PS = SPI_BAUDRATE_PS_8;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	827b      	strh	r3, [r7, #18]

	SPI1CFG.Comm_Mode = SPI_Comm_Mode_2LINES ;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	80fb      	strh	r3, [r7, #6]
	//	set slave select high (idel)
		MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, 1);
#endif

#ifdef MCU_Act_As_Slave
	SPI1CFG.Device_Mode = SPI_Device_MODE_SLAVE ;
 8000f30:	2300      	movs	r3, #0
 8000f32:	80bb      	strh	r3, [r7, #4]
	SPI1CFG.IRQ_EN = SPI_IRQ_EN_RXNEIE;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	82bb      	strh	r3, [r7, #20]
	SPI1CFG.NSS = SPI_NSS_HARDWARE_SLAVE ;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	823b      	strh	r3, [r7, #16]
	SPI1CFG.P_IRQ_CallBack = SPI_IRQ_Callback;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <main+0x8c>)
 8000f3e:	61bb      	str	r3, [r7, #24]


#endif

	MCAL_SPI_Init(SPI1, &SPI1CFG) ;
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4806      	ldr	r0, [pc, #24]	; (8000f60 <main+0x90>)
 8000f46:	f7ff fa7f 	bl	8000448 <MCAL_SPI_Init>

	MCAL_SPI_Set_Pins(SPI1);
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <main+0x90>)
 8000f4c:	f7ff fb0a 	bl	8000564 <MCAL_SPI_Set_Pins>



	while(1){
 8000f50:	e7fe      	b.n	8000f50 <main+0x80>
 8000f52:	bf00      	nop
 8000f54:	08000e85 	.word	0x08000e85
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	08000e49 	.word	0x08000e49
 8000f60:	40013000 	.word	0x40013000

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f92:	f000 f811 	bl	8000fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff ff9b 	bl	8000ed0 <main>

08000f9a <LoopForever>:

LoopForever:
    b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fa8:	08001040 	.word	0x08001040
  ldr r2, =_sbss
 8000fac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fb0:	20000068 	.word	0x20000068

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>
	...

08000fb8 <__libc_init_array>:
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	2600      	movs	r6, #0
 8000fbc:	4d0c      	ldr	r5, [pc, #48]	; (8000ff0 <__libc_init_array+0x38>)
 8000fbe:	4c0d      	ldr	r4, [pc, #52]	; (8000ff4 <__libc_init_array+0x3c>)
 8000fc0:	1b64      	subs	r4, r4, r5
 8000fc2:	10a4      	asrs	r4, r4, #2
 8000fc4:	42a6      	cmp	r6, r4
 8000fc6:	d109      	bne.n	8000fdc <__libc_init_array+0x24>
 8000fc8:	f000 f81a 	bl	8001000 <_init>
 8000fcc:	2600      	movs	r6, #0
 8000fce:	4d0a      	ldr	r5, [pc, #40]	; (8000ff8 <__libc_init_array+0x40>)
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <__libc_init_array+0x44>)
 8000fd2:	1b64      	subs	r4, r4, r5
 8000fd4:	10a4      	asrs	r4, r4, #2
 8000fd6:	42a6      	cmp	r6, r4
 8000fd8:	d105      	bne.n	8000fe6 <__libc_init_array+0x2e>
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
 8000fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe0:	4798      	blx	r3
 8000fe2:	3601      	adds	r6, #1
 8000fe4:	e7ee      	b.n	8000fc4 <__libc_init_array+0xc>
 8000fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fea:	4798      	blx	r3
 8000fec:	3601      	adds	r6, #1
 8000fee:	e7f2      	b.n	8000fd6 <__libc_init_array+0x1e>
 8000ff0:	08001038 	.word	0x08001038
 8000ff4:	08001038 	.word	0x08001038
 8000ff8:	08001038 	.word	0x08001038
 8000ffc:	0800103c 	.word	0x0800103c

08001000 <_init>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	bf00      	nop
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr

0800100c <_fini>:
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	bf00      	nop
 8001010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001012:	bc08      	pop	{r3}
 8001014:	469e      	mov	lr, r3
 8001016:	4770      	bx	lr


L7_U8_I2C_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001130  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001288  08001288  00011290  2**0
                  CONTENTS
  4 .ARM          00000000  08001288  08001288  00011290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001288  08001290  00011290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08001290  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001290  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002804  00000000  00000000  000112b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b4d  00000000  00000000  00013abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001312  00000000  00000000  0001460a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e8  00000000  00000000  00015920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000260  00000000  00000000  00015c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e69  00000000  00000000  00015e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003e4b  00000000  00000000  00018cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bd67  00000000  00000000  0001cb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00028883  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009a0  00000000  00000000  000288d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001248 	.word	0x08001248

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001248 	.word	0x08001248

08000170 <eeprom_init>:
 *      Author: Bolis
 */

#include "I2C_Slave_EEPROM.h"

void eeprom_init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	I2C_Config_t I2C_CFG;

	I2C_CFG.G_Call_Address_Detection = I2C_G_Call_Address_EN ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C_CFG.I2C_ACK_CTRL = I2C_ACK_EN ;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C_CFG.I2C_CLK_Speed = I2C_SCLK_SM_100K ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_CFG.I2C_Mode = I2C_Mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C_CFG.P_Slave_EV_CallBack = NULL ;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_CFG.StretchMode = I2C_StretchMode_EN ;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fac3 	bl	800071c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 f9aa 	bl	80004f4 <MCAL_I2C_Init>
}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:

unsigned char eeprom_write_Nbytes(uint32_t memory_address,uint8_t* data,uint8_t dataLen){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001be:	6018      	str	r0, [r3, #0]
 80001c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001c8:	6019      	str	r1, [r3, #0]
 80001ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ce:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80001d2:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[256];

	buffer[0]= (uint8_t)(memory_address >> 8); // upper byte memory address
 80001d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	0a1b      	lsrs	r3, r3, #8
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001ea:	701a      	strb	r2, [r3, #0]

	buffer[1]= (uint8_t)(memory_address); // lower byte memory address
 80001ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000200:	705a      	strb	r2, [r3, #1]

	for(uint8_t i=2 ; i < (dataLen+2) ; i++){
 8000202:	2302      	movs	r3, #2
 8000204:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000208:	e015      	b.n	8000236 <eeprom_write_Nbytes+0x86>
		buffer[i] = data[i-2];
 800020a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020e:	3b02      	subs	r3, #2
 8000210:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000214:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	441a      	add	r2, r3
 800021c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000220:	7811      	ldrb	r1, [r2, #0]
 8000222:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000226:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800022a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=2 ; i < (dataLen+2) ; i++){
 800022c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000230:	3301      	adds	r3, #1
 8000232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800023a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	1c5a      	adds	r2, r3, #1
 8000242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000246:	429a      	cmp	r2, r3
 8000248:	dadf      	bge.n	800020a <eeprom_write_Nbytes+0x5a>
	}

	MCAL_I2C_Master_Tx(I2C1, Slave_Address, buffer , dataLen+2, with_stop, start);
 800024a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800024e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3302      	adds	r3, #2
 8000256:	4619      	mov	r1, r3
 8000258:	f107 0214 	add.w	r2, r7, #20
 800025c:	2300      	movs	r3, #0
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2300      	movs	r3, #0
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	460b      	mov	r3, r1
 8000266:	212a      	movs	r1, #42	; 0x2a
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <eeprom_write_Nbytes+0xcc>)
 800026a:	f000 fb2f 	bl	80008cc <MCAL_I2C_Master_Tx>

	return 0;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40005400 	.word	0x40005400

08000280 <eeprom_read_Nbytes>:

unsigned char eeprom_read_Nbytes(uint32_t memory_address,uint8_t* data,uint8_t dataLen){
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	4613      	mov	r3, r2
 800028c:	71fb      	strb	r3, [r7, #7]

	uint8_t buffer[2];

	buffer[0]= (uint8_t)(memory_address >> 8); // upper byte memory address
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	b2db      	uxtb	r3, r3
 8000294:	753b      	strb	r3, [r7, #20]

	buffer[1]= (uint8_t)(memory_address); // lower byte memory address
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_Tx(I2C1, Slave_Address, buffer , 2, without_stop, start);
 800029c:	f107 0214 	add.w	r2, r7, #20
 80002a0:	2300      	movs	r3, #0
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2301      	movs	r3, #1
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2302      	movs	r3, #2
 80002aa:	212a      	movs	r1, #42	; 0x2a
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <eeprom_read_Nbytes+0x50>)
 80002ae:	f000 fb0d 	bl	80008cc <MCAL_I2C_Master_Tx>

	MCAL_I2C_Master_Rx(I2C1, Slave_Address, data, dataLen, with_stop, repeated_start);
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2201      	movs	r2, #1
 80002b6:	9201      	str	r2, [sp, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	212a      	movs	r1, #42	; 0x2a
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <eeprom_read_Nbytes+0x50>)
 80002c2:	f000 fa75 	bl	80007b0 <MCAL_I2C_Master_Rx>

	return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40005400 	.word	0x40005400

080002d4 <EXTI0_IRQHandler>:
//==========================================================
//						ISR Functions
//==========================================================


void EXTI0_IRQHandler(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	//	clear PR by w1
	EXTI->PR |= (1<<0);
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <EXTI0_IRQHandler+0x20>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4798      	blx	r3
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<1);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[1]();
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI1_IRQHandler+0x20>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4798      	blx	r3
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	2000001c 	.word	0x2000001c

0800031c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<2);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[2]();
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI2_IRQHandler+0x20>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	2000001c 	.word	0x2000001c

08000340 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<3);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI3_IRQHandler+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI3_IRQHandler+0x1c>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[3]();
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI3_IRQHandler+0x20>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010400 	.word	0x40010400
 8000360:	2000001c 	.word	0x2000001c

08000364 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	//	clear PR by w1
	EXTI->PR |= (1<<4);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6153      	str	r3, [r2, #20]

	//	call IRQ_CALL
	GP_IRQ_CallBack[4]();
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI4_IRQHandler+0x20>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	4798      	blx	r3
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010400 	.word	0x40010400
 8000384:	2000001c 	.word	0x2000001c

08000388 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	if(EXTI->PR &  1<<5) {EXTI->PR |= (1<<5);  GP_IRQ_CallBack[5](); }
 800038c:	4b26      	ldr	r3, [pc, #152]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI9_5_IRQHandler+0x22>
 8000398:	4b23      	ldr	r3, [pc, #140]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a22      	ldr	r2, [pc, #136]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6153      	str	r3, [r2, #20]
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4798      	blx	r3
	if(EXTI->PR &  1<<6) {EXTI->PR |= (1<<6);  GP_IRQ_CallBack[6](); }
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <EXTI9_5_IRQHandler+0x40>
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4798      	blx	r3
	if(EXTI->PR &  1<<7) {EXTI->PR |= (1<<7);  GP_IRQ_CallBack[7](); }
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d008      	beq.n	80003e6 <EXTI9_5_IRQHandler+0x5e>
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a13      	ldr	r2, [pc, #76]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	6153      	str	r3, [r2, #20]
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	4798      	blx	r3
	if(EXTI->PR &  1<<8) {EXTI->PR |= (1<<8);  GP_IRQ_CallBack[8](); }
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d008      	beq.n	8000404 <EXTI9_5_IRQHandler+0x7c>
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	4798      	blx	r3
	if(EXTI->PR &  1<<9) {EXTI->PR |= (1<<9);  GP_IRQ_CallBack[9](); }
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI9_5_IRQHandler+0x9a>
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4798      	blx	r3
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	2000001c 	.word	0x2000001c

08000430 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	if(EXTI->PR &  1<<10) {EXTI->PR |= (1<<10);  GP_IRQ_CallBack[10](); }
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800043c:	2b00      	cmp	r3, #0
 800043e:	d008      	beq.n	8000452 <EXTI15_10_IRQHandler+0x22>
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a29      	ldr	r2, [pc, #164]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6153      	str	r3, [r2, #20]
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800044e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000450:	4798      	blx	r3
	if(EXTI->PR &  1<<11) {EXTI->PR |= (1<<11);  GP_IRQ_CallBack[11](); }
 8000452:	4b26      	ldr	r3, [pc, #152]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045a:	2b00      	cmp	r3, #0
 800045c:	d008      	beq.n	8000470 <EXTI15_10_IRQHandler+0x40>
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a22      	ldr	r2, [pc, #136]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046e:	4798      	blx	r3
	if(EXTI->PR &  1<<12) {EXTI->PR |= (1<<12);  GP_IRQ_CallBack[12](); }
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d008      	beq.n	800048e <EXTI15_10_IRQHandler+0x5e>
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000486:	6153      	str	r3, [r2, #20]
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4798      	blx	r3
	if(EXTI->PR &  1<<13) {EXTI->PR |= (1<<13);  GP_IRQ_CallBack[13](); }
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d008      	beq.n	80004ac <EXTI15_10_IRQHandler+0x7c>
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004aa:	4798      	blx	r3
	if(EXTI->PR &  1<<14) {EXTI->PR |= (1<<14);  GP_IRQ_CallBack[14](); }
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <EXTI15_10_IRQHandler+0x9a>
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c2:	6153      	str	r3, [r2, #20]
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c8:	4798      	blx	r3
	if(EXTI->PR &  1<<15) {EXTI->PR |= (1<<15);  GP_IRQ_CallBack[15](); }
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <EXTI15_10_IRQHandler+0xb8>
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a04      	ldr	r2, [pc, #16]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e6:	4798      	blx	r3
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010400 	.word	0x40010400
 80004f0:	2000001c 	.word	0x2000001c

080004f4 <MCAL_I2C_Init>:

#define I2C1_Index	0
#define I2C2_Index	1

//-----------------------------------------------------------------------------
void MCAL_I2C_Init(I2C_Typedef *I2Cx,I2C_Config_t* I2C_CFG){
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]

	uint16_t freqrange=0 , tmpReg=0 , result=0;
 80004fe:	2300      	movs	r3, #0
 8000500:	82fb      	strh	r3, [r7, #22]
 8000502:	2300      	movs	r3, #0
 8000504:	82bb      	strh	r3, [r7, #20]
 8000506:	2300      	movs	r3, #0
 8000508:	827b      	strh	r3, [r7, #18]
	uint32_t Pclk = 8000000;
 800050a:	4b7b      	ldr	r3, [pc, #492]	; (80006f8 <MCAL_I2C_Init+0x204>)
 800050c:	60fb      	str	r3, [r7, #12]
	if(I2Cx == I2C1){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a7a      	ldr	r2, [pc, #488]	; (80006fc <MCAL_I2C_Init+0x208>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d110      	bne.n	8000538 <MCAL_I2C_Init+0x44>
		G_I2C_Config[I2C1_Index]= *I2C_CFG;
 8000516:	4a7a      	ldr	r2, [pc, #488]	; (8000700 <MCAL_I2C_Init+0x20c>)
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	4614      	mov	r4, r2
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	682b      	ldr	r3, [r5, #0]
 8000528:	6023      	str	r3, [r4, #0]
		RCC_EN_CLK_I2C1();
 800052a:	4b76      	ldr	r3, [pc, #472]	; (8000704 <MCAL_I2C_Init+0x210>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a75      	ldr	r2, [pc, #468]	; (8000704 <MCAL_I2C_Init+0x210>)
 8000530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	e014      	b.n	8000562 <MCAL_I2C_Init+0x6e>
	}
	else if(I2Cx == I2C2){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a73      	ldr	r2, [pc, #460]	; (8000708 <MCAL_I2C_Init+0x214>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d110      	bne.n	8000562 <MCAL_I2C_Init+0x6e>
		G_I2C_Config[I2C2_Index]= *I2C_CFG;
 8000540:	4b6f      	ldr	r3, [pc, #444]	; (8000700 <MCAL_I2C_Init+0x20c>)
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000548:	4615      	mov	r5, r2
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	682b      	ldr	r3, [r5, #0]
 8000554:	6023      	str	r3, [r4, #0]
		RCC_EN_CLK_I2C1();
 8000556:	4b6b      	ldr	r3, [pc, #428]	; (8000704 <MCAL_I2C_Init+0x210>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a6a      	ldr	r2, [pc, #424]	; (8000704 <MCAL_I2C_Init+0x210>)
 800055c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000560:	6193      	str	r3, [r2, #24]
	}

	if(I2C_CFG->I2C_Mode == I2C_Mode_I2C){
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d17f      	bne.n	800066a <MCAL_I2C_Init+0x176>

		// to congig CR2 and put frequency
		tmpReg = I2Cx->CR2;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	82bb      	strh	r3, [r7, #20]

		tmpReg &= ~(I2C_CR2_FREQ_Msk);
 8000570:	8abb      	ldrh	r3, [r7, #20]
 8000572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000576:	82bb      	strh	r3, [r7, #20]

		Pclk = MCAL_RCC_GetPCLK1Freq();
 8000578:	f000 fc12 	bl	8000da0 <MCAL_RCC_GetPCLK1Freq>
 800057c:	60f8      	str	r0, [r7, #12]
		freqrange = (uint16_t)(Pclk/1000000);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4a62      	ldr	r2, [pc, #392]	; (800070c <MCAL_I2C_Init+0x218>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	0c9b      	lsrs	r3, r3, #18
 8000588:	82fb      	strh	r3, [r7, #22]

		tmpReg |= freqrange;
 800058a:	8aba      	ldrh	r2, [r7, #20]
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	4313      	orrs	r3, r2
 8000590:	82bb      	strh	r3, [r7, #20]
		// write to CR2
		I2Cx->CR2 = tmpReg;
 8000592:	8aba      	ldrh	r2, [r7, #20]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f023 0201 	bic.w	r2, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]

		tmpReg = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	82bb      	strh	r3, [r7, #20]


		if((I2C_CFG->I2C_CLK_Speed == I2C_SCLK_SM_50K) || (I2C_CFG->I2C_CLK_Speed == I2C_SCLK_SM_100K)){
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f24c 3250 	movw	r2, #50000	; 0xc350
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d004      	beq.n	80005be <MCAL_I2C_Init+0xca>
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a55      	ldr	r2, [pc, #340]	; (8000710 <MCAL_I2C_Init+0x21c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d112      	bne.n	80005e4 <MCAL_I2C_Init+0xf0>

			result = (uint16_t)(Pclk / (I2C_CFG->I2C_CLK_Speed * 2 )) ;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	827b      	strh	r3, [r7, #18]

			tmpReg |= result;
 80005cc:	8aba      	ldrh	r2, [r7, #20]
 80005ce:	8a7b      	ldrh	r3, [r7, #18]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	82bb      	strh	r3, [r7, #20]

			I2Cx->CCR = tmpReg ;
 80005d4:	8aba      	ldrh	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	61da      	str	r2, [r3, #28]

			I2Cx->TRISE = freqrange + 1;
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	3301      	adds	r3, #1
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	621a      	str	r2, [r3, #32]
		}else{
			// if FM not supported now
		}

		//set CR1 config
		tmpReg = I2Cx->CR1;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	82bb      	strh	r3, [r7, #20]

		tmpReg |= (uint16_t)(I2C_CFG->I2C_ACK_CTRL | I2C_CFG->G_Call_Address_Detection |I2C_CFG->I2C_Mode | I2C_CFG->StretchMode);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	b29a      	uxth	r2, r3
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	b29b      	uxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b29a      	uxth	r2, r3
 800060e:	8abb      	ldrh	r3, [r7, #20]
 8000610:	4313      	orrs	r3, r2
 8000612:	82bb      	strh	r3, [r7, #20]

		I2Cx->CR1 = tmpReg;
 8000614:	8aba      	ldrh	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]

		tmpReg = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	82bb      	strh	r3, [r7, #20]

		if(I2C_CFG->I2C_Slave_Address.EN_Dual_Address == 1){
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	899b      	ldrh	r3, [r3, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d10d      	bne.n	8000642 <MCAL_I2C_Init+0x14e>
			tmpReg = I2C_OAR2_ENDUAL;
 8000626:	2301      	movs	r3, #1
 8000628:	82bb      	strh	r3, [r7, #20]
			tmpReg |= I2C_CFG->I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	8a1b      	ldrh	r3, [r3, #16]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	b21a      	sxth	r2, r3
 8000632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000636:	4313      	orrs	r3, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	82bb      	strh	r3, [r7, #20]
			I2Cx->OAR2 = tmpReg;
 800063c:	8aba      	ldrh	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60da      	str	r2, [r3, #12]
		}
		tmpReg =  0;
 8000642:	2300      	movs	r3, #0
 8000644:	82bb      	strh	r3, [r7, #20]
		tmpReg |= I2C_CFG->I2C_Slave_Address.Primary_Slave_Address << 1 ;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	89db      	ldrh	r3, [r3, #14]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	b21a      	sxth	r2, r3
 800064e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000652:	4313      	orrs	r3, r2
 8000654:	b21b      	sxth	r3, r3
 8000656:	82bb      	strh	r3, [r7, #20]
		tmpReg |= I2C_CFG->I2C_Slave_Address.I2C_Slave_Address_Mode;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	b29a      	uxth	r2, r3
 800065e:	8abb      	ldrh	r3, [r7, #20]
 8000660:	4313      	orrs	r3, r2
 8000662:	82bb      	strh	r3, [r7, #20]
		I2Cx->OAR1 = tmpReg;
 8000664:	8aba      	ldrh	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	609a      	str	r2, [r3, #8]

	else{
		// if SMBUS not supported now
	}

	if(I2C_CFG->P_Slave_EV_CallBack != NULL){
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d038      	beq.n	80006e4 <MCAL_I2C_Init+0x1f0>
		// En Interrupt
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MCAL_I2C_Init+0x208>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10c      	bne.n	80006b8 <MCAL_I2C_Init+0x1c4>

			NVIC_IRQ31_I2C1_EV_EN;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MCAL_I2C_Init+0x220>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MCAL_I2C_Init+0x220>)
 80006a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006a8:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_EN;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MCAL_I2C_Init+0x224>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <MCAL_I2C_Init+0x224>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e00f      	b.n	80006d8 <MCAL_I2C_Init+0x1e4>
		}
		else if(I2Cx == I2C1){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MCAL_I2C_Init+0x208>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d10b      	bne.n	80006d8 <MCAL_I2C_Init+0x1e4>
			NVIC_IRQ33_I2C2_EV_EN;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MCAL_I2C_Init+0x224>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <MCAL_I2C_Init+0x224>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_EN;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MCAL_I2C_Init+0x224>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <MCAL_I2C_Init+0x224>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
	}

	I2Cx->CR1 |= I2C_CR1_PE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f043 0201 	orr.w	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bdb0      	pop	{r4, r5, r7, pc}
 80006f8:	007a1200 	.word	0x007a1200
 80006fc:	40005400 	.word	0x40005400
 8000700:	20000058 	.word	0x20000058
 8000704:	40021000 	.word	0x40021000
 8000708:	40005800 	.word	0x40005800
 800070c:	431bde83 	.word	0x431bde83
 8000710:	000186a0 	.word	0x000186a0
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000e104 	.word	0xe000e104

0800071c <MCAL_I2C_GPIO_Set_Pins>:
		NVIC_IRQ34_I2C2_ER_Disable;
		RCC_Reset_I2C2();
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef *I2Cx){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t PinCFG;
	if(I2Cx == I2C1){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d118      	bne.n	800075e <MCAL_I2C_GPIO_Set_Pins+0x42>
		PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD ;
 8000730:	2307      	movs	r3, #7
 8000732:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10 ;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	481a      	ldr	r0, [pc, #104]	; (80007a8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000740:	f000 fc74 	bl	800102c <MCAL_GPIO_Init>

		PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD ;
 8000748:	2307      	movs	r3, #7
 800074a:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10 ;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000758:	f000 fc68 	bl	800102c <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD ;
		PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10 ;
		MCAL_GPIO_Init(GPIOB, &PinCFG);
	}
}
 800075c:	e01d      	b.n	800079a <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx == I2C2){
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d119      	bne.n	800079a <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 8000766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076a:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD ;
 800076c:	2307      	movs	r3, #7
 800076e:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10 ;
 8000770:	2301      	movs	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 800077c:	f000 fc56 	bl	800102c <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
 8000780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000784:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD ;
 8000786:	2307      	movs	r3, #7
 8000788:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_OutputSpeed = GPIO_SPEED_10 ;
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000796:	f000 fc49 	bl	800102c <MCAL_GPIO_Init>
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40005400 	.word	0x40005400
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40005800 	.word	0x40005800

080007b0 <MCAL_I2C_Master_Rx>:

void MCAL_I2C_Master_Rx(I2C_Typedef *I2Cx,uint16_t devAddr ,uint8_t *dataOut,uint32_t dataLen ,Stop_Condation stop ,Repeated_start start){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	460b      	mov	r3, r1
 80007be:	817b      	strh	r3, [r7, #10]

	int i;

	uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4a32      	ldr	r2, [pc, #200]	; (800088c <MCAL_I2C_Master_Rx+0xdc>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	bf14      	ite	ne
 80007c8:	2301      	movne	r3, #1
 80007ca:	2300      	moveq	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	74fb      	strb	r3, [r7, #19]
	// to send start bit
	I2C_generateStart(I2Cx, ENABLE, start);
 80007d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007d4:	461a      	mov	r2, r3
 80007d6:	2101      	movs	r1, #1
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f000 f8cd 	bl	8000978 <I2C_generateStart>

	// wait to receive ACK about send start bit
	while(!I2c_GetFlagStatus(I2Cx, EV5));
 80007de:	bf00      	nop
 80007e0:	2101      	movs	r1, #1
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f000 f92a 	bl	8000a3c <I2c_GetFlagStatus>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f8      	beq.n	80007e0 <MCAL_I2C_Master_Rx+0x30>

	// write address
	I2C_sendAddress(I2Cx, devAddr, I2C_Read);
 80007ee:	897b      	ldrh	r3, [r7, #10]
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f000 f8e6 	bl	80009c6 <I2C_sendAddress>

	// wait to address sent flag
	while(!(I2c_GetFlagStatus(I2Cx, EV6)));
 80007fa:	bf00      	nop
 80007fc:	2102      	movs	r1, #2
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f000 f91c 	bl	8000a3c <I2c_GetFlagStatus>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f8      	beq.n	80007fc <MCAL_I2C_Master_Rx+0x4c>


	I2C_AcknowledgeConfig(I2Cx , ENABLE);
 800080a:	2101      	movs	r1, #1
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f000 f841 	bl	8000894 <I2C_AcknowledgeConfig>

	if(dataLen){
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d01c      	beq.n	8000852 <MCAL_I2C_Master_Rx+0xa2>
		// receive data
		for (i = dataLen; i > 0; i--) {
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e012      	b.n	8000844 <MCAL_I2C_Master_Rx+0x94>
			// wait to address sent flag
			while(!I2c_GetFlagStatus(I2Cx, EV7));
 800081e:	bf00      	nop
 8000820:	2105      	movs	r1, #5
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f90a 	bl	8000a3c <I2c_GetFlagStatus>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <MCAL_I2C_Master_Rx+0x70>

			*dataOut = I2Cx->DR;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	701a      	strb	r2, [r3, #0]
			dataOut++;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
		for (i = dataLen; i > 0; i--) {
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3b01      	subs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2b00      	cmp	r3, #0
 8000848:	dce9      	bgt.n	800081e <MCAL_I2C_Master_Rx+0x6e>
		}
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
 800084a:	2100      	movs	r1, #0
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 f821 	bl	8000894 <I2C_AcknowledgeConfig>
	}

	// set stop
	if(stop == with_stop)
 8000852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d103      	bne.n	8000862 <MCAL_I2C_Master_Rx+0xb2>
		I2C_generateStop(I2Cx, ENABLE);
 800085a:	2101      	movs	r1, #1
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f000 f8d1 	bl	8000a04 <I2C_generateStop>

	if(G_I2C_Config[index].I2C_ACK_CTRL == I2C_ACK_EN){
 8000862:	7cfa      	ldrb	r2, [r7, #19]
 8000864:	490a      	ldr	r1, [pc, #40]	; (8000890 <MCAL_I2C_Master_Rx+0xe0>)
 8000866:	4613      	mov	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3318      	adds	r3, #24
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000878:	d103      	bne.n	8000882 <MCAL_I2C_Master_Rx+0xd2>
		I2C_AcknowledgeConfig(I2Cx  , ENABLE);
 800087a:	2101      	movs	r1, #1
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f000 f809 	bl	8000894 <I2C_AcknowledgeConfig>
	}

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40005400 	.word	0x40005400
 8000890:	20000058 	.word	0x20000058

08000894 <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_Typedef *I2Cx , FunctionalState state){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	if(state != DISABLE){
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <I2C_AcknowledgeConfig+0x20>
		I2Cx->CR1 |= I2C_CR1_ACK;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
	}
	else{
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80008b2:	e005      	b.n	80008c0 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <MCAL_I2C_Master_Tx>:
void MCAL_I2C_Master_Tx(I2C_Typedef *I2Cx,uint16_t devAddr ,uint8_t *dataOut,uint32_t dataLen ,Stop_Condation stop ,Repeated_start start){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	460b      	mov	r3, r1
 80008da:	817b      	strh	r3, [r7, #10]

	int i =0 ;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
	// to send start bit
	I2C_generateStart(I2Cx, ENABLE, start);
 80008e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008e4:	461a      	mov	r2, r3
 80008e6:	2101      	movs	r1, #1
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f000 f845 	bl	8000978 <I2C_generateStart>

	// wait to receive ACK about send start bit
	while(!(I2c_GetFlagStatus(I2Cx, EV5)));
 80008ee:	bf00      	nop
 80008f0:	2101      	movs	r1, #1
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f000 f8a2 	bl	8000a3c <I2c_GetFlagStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f8      	beq.n	80008f0 <MCAL_I2C_Master_Tx+0x24>

	// write address
	I2C_sendAddress(I2Cx, devAddr, I2C_Write);
 80008fe:	897b      	ldrh	r3, [r7, #10]
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f000 f85e 	bl	80009c6 <I2C_sendAddress>

	// wait to address sent flag
	while(!(I2c_GetFlagStatus(I2Cx, EV6)));
 800090a:	bf00      	nop
 800090c:	2102      	movs	r1, #2
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 f894 	bl	8000a3c <I2c_GetFlagStatus>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f8      	beq.n	800090c <MCAL_I2C_Master_Tx+0x40>

	// to check master BUSY TXE flags
	while(!(I2c_GetFlagStatus(I2Cx, MASTER_RYTE_WRITE)));
 800091a:	bf00      	nop
 800091c:	4915      	ldr	r1, [pc, #84]	; (8000974 <MCAL_I2C_Master_Tx+0xa8>)
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f000 f88c 	bl	8000a3c <I2c_GetFlagStatus>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f8      	beq.n	800091c <MCAL_I2C_Master_Tx+0x50>

	// send Data
	for (i = 0; i < dataLen; ++i) {
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e011      	b.n	8000954 <MCAL_I2C_Master_Tx+0x88>
		I2Cx->DR = dataOut[i];
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	611a      	str	r2, [r3, #16]
		// to check Tx buffer is empty
		while(!(I2c_GetFlagStatus(I2Cx, EV8)));
 800093e:	bf00      	nop
 8000940:	2103      	movs	r1, #3
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f87a 	bl	8000a3c <I2c_GetFlagStatus>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f8      	beq.n	8000940 <MCAL_I2C_Master_Tx+0x74>
	for (i = 0; i < dataLen; ++i) {
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8e9      	bhi.n	8000930 <MCAL_I2C_Master_Tx+0x64>
	}

	// set stop
	if(stop == with_stop)
 800095c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <MCAL_I2C_Master_Tx+0xa0>
		I2C_generateStop(I2Cx, ENABLE);
 8000964:	2101      	movs	r1, #1
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f000 f84c 	bl	8000a04 <I2C_generateStop>

}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	00070080 	.word	0x00070080

08000978 <I2C_generateStart>:


void I2C_generateStart(I2C_Typedef *I2Cx ,FunctionalState NewState ,Repeated_start start){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	70fb      	strb	r3, [r7, #3]
 8000984:	4613      	mov	r3, r2
 8000986:	70bb      	strb	r3, [r7, #2]

	if(start != repeated_start){
 8000988:	78bb      	ldrb	r3, [r7, #2]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d007      	beq.n	800099e <I2C_generateStart+0x26>

		// check BUS is idle or BUSY
		while(I2c_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 800098e:	bf00      	nop
 8000990:	2100      	movs	r1, #0
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f852 	bl	8000a3c <I2c_GetFlagStatus>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f8      	bne.n	8000990 <I2C_generateStart+0x18>
	}

	if(NewState != DISABLE){
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <I2C_generateStart+0x3a>

		I2Cx->CR1 |= I2C_CR1_START ;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	601a      	str	r2, [r3, #0]
	}else{
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}
}
 80009b0:	e005      	b.n	80009be <I2C_generateStart+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <I2C_sendAddress>:

void I2C_sendAddress(I2C_Typedef *I2Cx,uint16_t address ,I2C_ReadWrite I2C_RW){
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	707b      	strb	r3, [r7, #1]

	address = address << 1 ;
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	807b      	strh	r3, [r7, #2]
	if(I2C_RW != I2C_Write){
 80009dc:	787b      	ldrb	r3, [r7, #1]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d004      	beq.n	80009ec <I2C_sendAddress+0x26>

		address |= 1<<0 ;
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	807b      	strh	r3, [r7, #2]
 80009ea:	e003      	b.n	80009f4 <I2C_sendAddress+0x2e>
	}
	else{
		address &= ~(1<<0);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	f023 0301 	bic.w	r3, r3, #1
 80009f2:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR =	address ;
 80009f4:	887a      	ldrh	r2, [r7, #2]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	611a      	str	r2, [r3, #16]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <I2C_generateStop>:


void I2C_generateStop(I2C_Typedef *I2Cx ,FunctionalState NewState){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]

	if(NewState != DISABLE){
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <I2C_generateStop+0x20>

		I2Cx->CR1 |= I2C_CR1_STOP ;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
	}
	else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP) ;
	}
}
 8000a22:	e005      	b.n	8000a30 <I2C_generateStop+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP) ;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
	...

08000a3c <I2c_GetFlagStatus>:

FlagStatus I2c_GetFlagStatus(I2C_Typedef *I2Cx,Status flag){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	FlagStatus bitstatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1 = 0 ,flag2 = 0 , lastEvent = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
//	volatile uint32_t dummyRead;

	switch(flag){
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d811      	bhi.n	8000a80 <I2c_GetFlagStatus+0x44>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d86a      	bhi.n	8000b38 <I2c_GetFlagStatus+0xfc>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <I2c_GetFlagStatus+0x2c>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000a8b 	.word	0x08000a8b
 8000a6c:	08000aa3 	.word	0x08000aa3
 8000a70:	08000abb 	.word	0x08000abb
 8000a74:	08000b09 	.word	0x08000b09
 8000a78:	08000b09 	.word	0x08000b09
 8000a7c:	08000b21 	.word	0x08000b21
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <I2c_GetFlagStatus+0x108>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d024      	beq.n	8000ad2 <I2c_GetFlagStatus+0x96>
 8000a88:	e056      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
	case I2C_FLAG_BUSY:
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <I2c_GetFlagStatus+0x60>
			bitstatus = SET;
 8000a96:	2301      	movs	r3, #1
 8000a98:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000a9a:	e04d      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75fb      	strb	r3, [r7, #23]
		break;
 8000aa0:	e04a      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>

	case EV5:
		if((I2Cx->SR1) & (I2C_SR1_SB))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <I2c_GetFlagStatus+0x78>
			bitstatus = SET;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000ab2:	e041      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	75fb      	strb	r3, [r7, #23]
		break;
 8000ab8:	e03e      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>

	case EV6:
		if((I2Cx->SR1) & (I2C_SR1_ADDR))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <I2c_GetFlagStatus+0x90>
			bitstatus = SET;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		break;
 8000aca:	e035      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	75fb      	strb	r3, [r7, #23]
		break;
 8000ad0:	e032      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>

	case MASTER_RYTE_WRITE:
		flag1 = I2Cx->SR1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	041b      	lsls	r3, r3, #16
 8000ae2:	60fb      	str	r3, [r7, #12]
		lastEvent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000aee:	60bb      	str	r3, [r7, #8]
		if((lastEvent & flag) == flag)
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4013      	ands	r3, r2
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d102      	bne.n	8000b02 <I2c_GetFlagStatus+0xc6>
			bitstatus = SET;
 8000afc:	2301      	movs	r3, #1
 8000afe:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000b00:	e01a      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	75fb      	strb	r3, [r7, #23]
		break;
 8000b06:	e017      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>

	case EV8_1:
	case EV8:
		if((I2Cx->SR1) & (I2C_SR1_TXE))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <I2c_GetFlagStatus+0xde>
			bitstatus = SET;
 8000b14:	2301      	movs	r3, #1
 8000b16:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000b18:	e00e      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75fb      	strb	r3, [r7, #23]
		break;
 8000b1e:	e00b      	b.n	8000b38 <I2c_GetFlagStatus+0xfc>
	case EV7:
		if((I2Cx->SR1) & (I2C_SR1_RXNE))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <I2c_GetFlagStatus+0xf6>
			bitstatus = SET;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000b30:	e001      	b.n	8000b36 <I2c_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	75fb      	strb	r3, [r7, #23]
		break;
 8000b36:	bf00      	nop

	}
	return bitstatus;
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	00070080 	.word	0x00070080

08000b48 <I2C1_EV_IRQHandler>:
	data = (uint8_t)(I2Cx->DR);
	return data;
}


void I2C1_EV_IRQHandler(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

	volatile uint32_t dummyRead = 0 ;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
	I2C_Typedef *I2Cx = I2C1 ;
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <I2C1_EV_IRQHandler+0xe8>)
 8000b54:	617b      	str	r3, [r7, #20]
	uint32_t t1,t2,t3;

	t1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b5e:	613b      	str	r3, [r7, #16]
	t2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b68:	60fb      	str	r3, [r7, #12]
	t3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60bb      	str	r3, [r7, #8]

	if(t1 && t3){
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00a      	beq.n	8000b90 <I2C1_EV_IRQHandler+0x48>
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d007      	beq.n	8000b90 <I2C1_EV_IRQHandler+0x48>
		I2Cx->CR1 |= 0x0000;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_Stop);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f000 f852 	bl	8000c34 <Slave_States>
	}

	t3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	60bb      	str	r3, [r7, #8]

	if(t1 && t3){
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d012      	beq.n	8000bc6 <I2C1_EV_IRQHandler+0x7e>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00f      	beq.n	8000bc6 <I2C1_EV_IRQHandler+0x7e>

		if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d109      	bne.n	8000bc6 <I2C1_EV_IRQHandler+0x7e>

		}
		else{

			dummyRead = I2Cx->SR1;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx ,I2C_EV_ADDR_Matched);
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f000 f837 	bl	8000c34 <Slave_States>
		}
	}

	t3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60bb      	str	r3, [r7, #8]

	if(t1 && t2 && t3){
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00f      	beq.n	8000bf6 <I2C1_EV_IRQHandler+0xae>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00c      	beq.n	8000bf6 <I2C1_EV_IRQHandler+0xae>
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d009      	beq.n	8000bf6 <I2C1_EV_IRQHandler+0xae>

		if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d103      	bne.n	8000bf6 <I2C1_EV_IRQHandler+0xae>

		}
		else{
			Slave_States(I2Cx,I2c_EV_DATA_REQ);
 8000bee:	2103      	movs	r1, #3
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f000 f81f 	bl	8000c34 <Slave_States>
		}
	}

	t3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	60bb      	str	r3, [r7, #8]

	if(t1 && t2 && t3){
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00f      	beq.n	8000c26 <I2C1_EV_IRQHandler+0xde>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00c      	beq.n	8000c26 <I2C1_EV_IRQHandler+0xde>
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d009      	beq.n	8000c26 <I2C1_EV_IRQHandler+0xde>

		if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d103      	bne.n	8000c26 <I2C1_EV_IRQHandler+0xde>

		}
		else{
			Slave_States(I2Cx,I2c_EV_DATA_RCV);
 8000c1e:	2104      	movs	r1, #4
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f000 f807 	bl	8000c34 <Slave_States>
		}
	}


}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400

08000c34 <Slave_States>:

void Slave_States(I2C_Typedef *I2Cx , Slave_State state){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]

	uint8_t index = I2Cx == I2C1 ?I2C1_Index : I2C2_Index;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a32      	ldr	r2, [pc, #200]	; (8000d0c <Slave_States+0xd8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	73fb      	strb	r3, [r7, #15]

	switch (state) {
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d856      	bhi.n	8000d04 <Slave_States+0xd0>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <Slave_States+0x28>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c77 	.word	0x08000c77
 8000c60:	08000c71 	.word	0x08000c71
 8000c64:	08000c9b 	.word	0x08000c9b
 8000c68:	08000cb3 	.word	0x08000cb3
 8000c6c:	08000cd7 	.word	0x08000cd7
	case I2C_ERROR_AF:
		if(I2Cx->SR2 & (I2C_SR2_TRA)){
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	699b      	ldr	r3, [r3, #24]

		}

		break;
 8000c74:	e046      	b.n	8000d04 <Slave_States+0xd0>

	case I2C_EV_Stop:
		if(I2Cx->SR2 & (I2C_SR2_TRA)){
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d03b      	beq.n	8000cfa <Slave_States+0xc6>

			G_I2C_Config[index].P_Slave_EV_CallBack(I2C_EV_Stop);
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	4922      	ldr	r1, [pc, #136]	; (8000d10 <Slave_States+0xdc>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	3320      	adds	r3, #32
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2000      	movs	r0, #0
 8000c96:	4798      	blx	r3
		}

		break;
 8000c98:	e02f      	b.n	8000cfa <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:

			G_I2C_Config[index].P_Slave_EV_CallBack(I2C_EV_ADDR_Matched);
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	491c      	ldr	r1, [pc, #112]	; (8000d10 <Slave_States+0xdc>)
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3320      	adds	r3, #32
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2002      	movs	r0, #2
 8000cae:	4798      	blx	r3

		break;
 8000cb0:	e028      	b.n	8000d04 <Slave_States+0xd0>

	case I2c_EV_DATA_REQ:
		if(I2Cx->SR2 & (I2C_SR2_TRA)){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d01f      	beq.n	8000cfe <Slave_States+0xca>

			G_I2C_Config[index].P_Slave_EV_CallBack(I2c_EV_DATA_REQ);
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	4913      	ldr	r1, [pc, #76]	; (8000d10 <Slave_States+0xdc>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3320      	adds	r3, #32
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	4798      	blx	r3
		}
		break;
 8000cd4:	e013      	b.n	8000cfe <Slave_States+0xca>

	case I2c_EV_DATA_RCV:

		if(!(I2Cx->SR2 & (I2C_SR2_TRA))){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <Slave_States+0xce>

			G_I2C_Config[index].P_Slave_EV_CallBack(I2c_EV_DATA_RCV);
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	490a      	ldr	r1, [pc, #40]	; (8000d10 <Slave_States+0xdc>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3320      	adds	r3, #32
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	4798      	blx	r3
		}

		break;
 8000cf8:	e003      	b.n	8000d02 <Slave_States+0xce>
		break;
 8000cfa:	bf00      	nop
 8000cfc:	e002      	b.n	8000d04 <Slave_States+0xd0>
		break;
 8000cfe:	bf00      	nop
 8000d00:	e000      	b.n	8000d04 <Slave_States+0xd0>
		break;
 8000d02:	bf00      	nop
	}
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	20000058 	.word	0x20000058

08000d14 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void){
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void){
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <MCAL_RCC_GetSYSCLKFreq>:
#include "stm32f103c6_RCC_driver.h"


const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};
const uint8_t APBPrescTable[16] = {0,0,0,0,1,2,3,4};
uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

	switch( (RCC->CFGR >> 2) & 0b11){
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d00a      	beq.n	8000d60 <MCAL_RCC_GetSYSCLKFreq+0x28>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d80a      	bhi.n	8000d64 <MCAL_RCC_GetSYSCLKFreq+0x2c>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d002      	beq.n	8000d5c <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000d56:	e005      	b.n	8000d64 <MCAL_RCC_GetSYSCLKFreq+0x2c>
	case 0:
		return HSI_RC_CLK;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000d5a:	e003      	b.n	8000d64 <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	case 1:
		return HSE_CLK;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 8000d5e:	e001      	b.n	8000d64 <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	case 2:
		return 16000000 ;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 8000d62:	e7ff      	b.n	8000d64 <MCAL_RCC_GetSYSCLKFreq+0x2c>
		break;
	}
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	007a1200 	.word	0x007a1200
 8000d74:	00f42400 	.word	0x00f42400

08000d78 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

	return ( MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[ (RCC->CFGR >> 4) & 0xf ] );
 8000d7c:	f7ff ffdc 	bl	8000d38 <MCAL_RCC_GetSYSCLKFreq>
 8000d80:	4602      	mov	r2, r0
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <MCAL_RCC_GetHCLKFreq+0x24>)
 8000d8e:	5ccb      	ldrb	r3, [r1, r3]
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	08001268 	.word	0x08001268

08000da0 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ (RCC->CFGR >> 8) & 0b111 ] );
 8000da4:	f7ff ffe8 	bl	8000d78 <MCAL_RCC_GetHCLKFreq>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	4903      	ldr	r1, [pc, #12]	; (8000dc4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000db6:	5ccb      	ldrb	r3, [r1, r3]
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	08001278 	.word	0x08001278

08000dc8 <SPI1_IRQHandler>:

//===============================================================
//       IRQ
//===============================================================

void SPI1_IRQHandler(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

	struct S_IRQ_SPI irq_src;

	irq_src.TXE = ( (SPI1->SR & (1<<1)) >> 1 );
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <SPI1_IRQHandler+0x54>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	085b      	lsrs	r3, r3, #1
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	f362 0300 	bfi	r3, r2, #0, #1
 8000de0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0)) >> 0 );
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <SPI1_IRQHandler+0x54>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	793b      	ldrb	r3, [r7, #4]
 8000dee:	f362 0341 	bfi	r3, r2, #1, #1
 8000df2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4)) >> 4 );
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <SPI1_IRQHandler+0x54>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	f362 0382 	bfi	r3, r2, #2, #1
 8000e06:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SPI1_IRQHandler+0x58>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	7938      	ldrb	r0, [r7, #4]
 8000e10:	4798      	blx	r3
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40013000 	.word	0x40013000
 8000e20:	200000a0 	.word	0x200000a0

08000e24 <SPI2_IRQHandler>:



void SPI2_IRQHandler(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

	struct S_IRQ_SPI irq_src;

	irq_src.TXE = ( (SPI1->SR & (1<<1)) >> 1 );
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <SPI2_IRQHandler+0x54>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	793b      	ldrb	r3, [r7, #4]
 8000e38:	f362 0300 	bfi	r3, r2, #0, #1
 8000e3c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0)) >> 0 );
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <SPI2_IRQHandler+0x54>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e4e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4)) >> 4 );
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <SPI2_IRQHandler+0x54>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	793b      	ldrb	r3, [r7, #4]
 8000e5e:	f362 0382 	bfi	r3, r2, #2, #1
 8000e62:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SPI2_IRQHandler+0x58>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	7938      	ldrb	r0, [r7, #4]
 8000e6c:	4798      	blx	r3
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	200000a0 	.word	0x200000a0

08000e80 <USART1_IRQHandler>:

}



void USART1_IRQHandler(void){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

	G_USART_Config->P_IRQ_CallBack ();
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <USART1_IRQHandler+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	4798      	blx	r3
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000a8 	.word	0x200000a8

08000e94 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	G_USART_Config->P_IRQ_CallBack ();
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	4798      	blx	r3
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000a8 	.word	0x200000a8

08000ea8 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

	G_USART_Config->P_IRQ_CallBack ();
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <USART3_IRQHandler+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	4798      	blx	r3
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000a8 	.word	0x200000a8

08000ebc <Get_CRLH_Postion>:

//=====================================================================
//						Generic Functions
//=====================================================================

uint8_t Get_CRLH_Postion(uint16_t PinNumber){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber){
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ecc:	f000 80a5 	beq.w	800101a <Get_CRLH_Postion+0x15e>
 8000ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed4:	f300 80a3 	bgt.w	800101e <Get_CRLH_Postion+0x162>
 8000ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000edc:	f000 809b 	beq.w	8001016 <Get_CRLH_Postion+0x15a>
 8000ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee4:	f300 809b 	bgt.w	800101e <Get_CRLH_Postion+0x162>
 8000ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eec:	f000 8091 	beq.w	8001012 <Get_CRLH_Postion+0x156>
 8000ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef4:	f300 8093 	bgt.w	800101e <Get_CRLH_Postion+0x162>
 8000ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000efc:	f000 8087 	beq.w	800100e <Get_CRLH_Postion+0x152>
 8000f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f04:	f300 808b 	bgt.w	800101e <Get_CRLH_Postion+0x162>
 8000f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f0c:	d07d      	beq.n	800100a <Get_CRLH_Postion+0x14e>
 8000f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f12:	f300 8084 	bgt.w	800101e <Get_CRLH_Postion+0x162>
 8000f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1a:	d074      	beq.n	8001006 <Get_CRLH_Postion+0x14a>
 8000f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f20:	dc7d      	bgt.n	800101e <Get_CRLH_Postion+0x162>
 8000f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f26:	d06c      	beq.n	8001002 <Get_CRLH_Postion+0x146>
 8000f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f2c:	dc77      	bgt.n	800101e <Get_CRLH_Postion+0x162>
 8000f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f32:	d064      	beq.n	8000ffe <Get_CRLH_Postion+0x142>
 8000f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f38:	dc71      	bgt.n	800101e <Get_CRLH_Postion+0x162>
 8000f3a:	2b80      	cmp	r3, #128	; 0x80
 8000f3c:	d05d      	beq.n	8000ffa <Get_CRLH_Postion+0x13e>
 8000f3e:	2b80      	cmp	r3, #128	; 0x80
 8000f40:	dc6d      	bgt.n	800101e <Get_CRLH_Postion+0x162>
 8000f42:	2b20      	cmp	r3, #32
 8000f44:	dc48      	bgt.n	8000fd8 <Get_CRLH_Postion+0x11c>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	dd69      	ble.n	800101e <Get_CRLH_Postion+0x162>
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	2b1f      	cmp	r3, #31
 8000f4e:	d866      	bhi.n	800101e <Get_CRLH_Postion+0x162>
 8000f50:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <Get_CRLH_Postion+0x9c>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000fdf 	.word	0x08000fdf
 8000f5c:	08000fe3 	.word	0x08000fe3
 8000f60:	0800101f 	.word	0x0800101f
 8000f64:	08000fe7 	.word	0x08000fe7
 8000f68:	0800101f 	.word	0x0800101f
 8000f6c:	0800101f 	.word	0x0800101f
 8000f70:	0800101f 	.word	0x0800101f
 8000f74:	08000feb 	.word	0x08000feb
 8000f78:	0800101f 	.word	0x0800101f
 8000f7c:	0800101f 	.word	0x0800101f
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	08000fef 	.word	0x08000fef
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	0800101f 	.word	0x0800101f
 8000fb8:	0800101f 	.word	0x0800101f
 8000fbc:	0800101f 	.word	0x0800101f
 8000fc0:	0800101f 	.word	0x0800101f
 8000fc4:	0800101f 	.word	0x0800101f
 8000fc8:	0800101f 	.word	0x0800101f
 8000fcc:	0800101f 	.word	0x0800101f
 8000fd0:	0800101f 	.word	0x0800101f
 8000fd4:	08000ff3 	.word	0x08000ff3
 8000fd8:	2b40      	cmp	r3, #64	; 0x40
 8000fda:	d00c      	beq.n	8000ff6 <Get_CRLH_Postion+0x13a>
 8000fdc:	e01f      	b.n	800101e <Get_CRLH_Postion+0x162>
	case GPIO_PIN_0 :
		return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e01e      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e01c      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	e01a      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000fea:	230c      	movs	r3, #12
 8000fec:	e018      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	e016      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	e014      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000ff6:	2318      	movs	r3, #24
 8000ff8:	e012      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000ffa:	231c      	movs	r3, #28
 8000ffc:	e010      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e00e      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8001002:	2304      	movs	r3, #4
 8001004:	e00c      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 8001006:	2308      	movs	r3, #8
 8001008:	e00a      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 800100a:	230c      	movs	r3, #12
 800100c:	e008      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 800100e:	2310      	movs	r3, #16
 8001010:	e006      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 8001012:	2314      	movs	r3, #20
 8001014:	e004      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 8001016:	2318      	movs	r3, #24
 8001018:	e002      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 800101a:	231c      	movs	r3, #28
 800101c:	e000      	b.n	8001020 <Get_CRLH_Postion+0x164>
		break;
	}
	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MCAL_GPIO_Init>:

//=====================================================================
//						APIs Functions Definitions
//=====================================================================

void MCAL_GPIO_Init(GPIO_Typedef* GPIOx, GPIO_PinConfig_t* PinConfig){
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  	Pins from 0 to 7
	//Port configuration register low (GPIOx_CRL) 	Pins from 8 to 15

	volatile uint32_t* configregister = NULL ;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]

	configregister  = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	2bff      	cmp	r3, #255	; 0xff
 8001044:	d801      	bhi.n	800104a <MCAL_GPIO_Init+0x1e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	e001      	b.n	800104e <MCAL_GPIO_Init+0x22>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3304      	adds	r3, #4
 800104e:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Postion(PinConfig->GPIO_PinNumber));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <Get_CRLH_Postion>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	230f      	movs	r3, #15
 8001060:	4093      	lsls	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	401a      	ands	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ||
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	2b05      	cmp	r3, #5
 8001074:	d00b      	beq.n	800108e <MCAL_GPIO_Init+0x62>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d007      	beq.n	800108e <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP ){
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ||
 8001082:	2b07      	cmp	r3, #7
 8001084:	d003      	beq.n	800108e <MCAL_GPIO_Init+0x62>
			PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP ){
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	2b06      	cmp	r3, #6
 800108c:	d10e      	bne.n	80010ac <MCAL_GPIO_Init+0x80>
		//set CNF0[1:0] MODE0[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_OutputSpeed)) & 0x0f );
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	3b04      	subs	r3, #4
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	b25a      	sxtb	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	78db      	ldrb	r3, [r3, #3]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e02c      	b.n	8001106 <MCAL_GPIO_Init+0xda>
	}

	// if pin is input
	// MODE = 00: Input mode (reset state)
	else{
		if(PinConfig->GPIO_Mode == GPIO_MODE_ANALOG || PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO  ){
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	789b      	ldrb	r3, [r3, #2]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <MCAL_GPIO_Init+0x90>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d107      	bne.n	80010cc <MCAL_GPIO_Init+0xa0>
			//set CNF0[1:0] MODE0[1:0]
			PIN_Config = ((((PinConfig->GPIO_Mode) << 2) | 0x0) & 0x0f );
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e01c      	b.n	8001106 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT){
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d102      	bne.n	80010da <MCAL_GPIO_Init+0xae>
			//set CNF0[1:0] MODE0[1:0]
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f );
 80010d4:	2304      	movs	r3, #4
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e015      	b.n	8001106 <MCAL_GPIO_Init+0xda>
		}
		else{
			//set CNF0[1:0] MODE0[1:0]
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f );
 80010da:	2308      	movs	r3, #8
 80010dc:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d107      	bne.n	80010f6 <MCAL_GPIO_Init+0xca>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	8812      	ldrh	r2, [r2, #0]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	e007      	b.n	8001106 <MCAL_GPIO_Init+0xda>
			}
			else{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	43d2      	mvns	r2, r2
 8001100:	401a      	ands	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//write on CRL,CRH Register
	(*configregister) |= ((PIN_Config) << Get_CRLH_Postion(PinConfig->GPIO_PinNumber));
 8001106:	7bfc      	ldrb	r4, [r7, #15]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fed5 	bl	8000ebc <Get_CRLH_Postion>
 8001112:	4603      	mov	r3, r0
 8001114:	fa04 f203 	lsl.w	r2, r4, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
	...

0800112c <main>:
#include "stm32f103c6_gpio_driver.h"
#include "stm32f103c6_I2C_driver.h"
#include "I2C_Slave_EEPROM.h"

int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
	eeprom_init();
 8001132:	f7ff f81d 	bl	8000170 <eeprom_init>

	unsigned char data1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <main+0x7c>)
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	6018      	str	r0, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	8019      	strh	r1, [r3, #0]
 8001146:	3302      	adds	r3, #2
 8001148:	0c0a      	lsrs	r2, r1, #16
 800114a:	701a      	strb	r2, [r3, #0]
	unsigned char data2[7]={0};
 800114c:	2300      	movs	r3, #0
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2100      	movs	r1, #0
 8001154:	460a      	mov	r2, r1
 8001156:	801a      	strh	r2, [r3, #0]
 8001158:	460a      	mov	r2, r1
 800115a:	709a      	strb	r2, [r3, #2]


	eeprom_write_Nbytes(0xAF, data1, 7);
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2207      	movs	r2, #7
 8001162:	4619      	mov	r1, r3
 8001164:	20af      	movs	r0, #175	; 0xaf
 8001166:	f7ff f823 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_Nbytes(0xAF, data2, 7);
 800116a:	463b      	mov	r3, r7
 800116c:	2207      	movs	r2, #7
 800116e:	4619      	mov	r1, r3
 8001170:	20af      	movs	r0, #175	; 0xaf
 8001172:	f7ff f885 	bl	8000280 <eeprom_read_Nbytes>

	data1[0] = 0xA;
 8001176:	230a      	movs	r3, #10
 8001178:	723b      	strb	r3, [r7, #8]
	data1[1] = 0xB;
 800117a:	230b      	movs	r3, #11
 800117c:	727b      	strb	r3, [r7, #9]
	data1[2] = 0xC;
 800117e:	230c      	movs	r3, #12
 8001180:	72bb      	strb	r3, [r7, #10]
	data1[3] = 0xD;
 8001182:	230d      	movs	r3, #13
 8001184:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF, data1, 4);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2204      	movs	r2, #4
 800118c:	4619      	mov	r1, r3
 800118e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001192:	f7ff f80d 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_Nbytes(0xFFF, data2, 4);
 8001196:	463b      	mov	r3, r7
 8001198:	2204      	movs	r2, #4
 800119a:	4619      	mov	r1, r3
 800119c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011a0:	f7ff f86e 	bl	8000280 <eeprom_read_Nbytes>

	for(;;);
 80011a4:	e7fe      	b.n	80011a4 <main+0x78>
 80011a6:	bf00      	nop
 80011a8:	08001260 	.word	0x08001260

080011ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	; (80011ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <LoopForever+0xe>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	; (80011f8 <LoopForever+0x16>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011da:	f000 f811 	bl	8001200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff ffa5 	bl	800112c <main>

080011e2 <LoopForever>:

LoopForever:
    b LoopForever
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
  ldr   r0, =_estack
 80011e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80011f0:	08001290 	.word	0x08001290
  ldr r2, =_sbss
 80011f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80011f8:	200000ac 	.word	0x200000ac

080011fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_2_IRQHandler>
	...

08001200 <__libc_init_array>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	2600      	movs	r6, #0
 8001204:	4d0c      	ldr	r5, [pc, #48]	; (8001238 <__libc_init_array+0x38>)
 8001206:	4c0d      	ldr	r4, [pc, #52]	; (800123c <__libc_init_array+0x3c>)
 8001208:	1b64      	subs	r4, r4, r5
 800120a:	10a4      	asrs	r4, r4, #2
 800120c:	42a6      	cmp	r6, r4
 800120e:	d109      	bne.n	8001224 <__libc_init_array+0x24>
 8001210:	f000 f81a 	bl	8001248 <_init>
 8001214:	2600      	movs	r6, #0
 8001216:	4d0a      	ldr	r5, [pc, #40]	; (8001240 <__libc_init_array+0x40>)
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <__libc_init_array+0x44>)
 800121a:	1b64      	subs	r4, r4, r5
 800121c:	10a4      	asrs	r4, r4, #2
 800121e:	42a6      	cmp	r6, r4
 8001220:	d105      	bne.n	800122e <__libc_init_array+0x2e>
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	f855 3b04 	ldr.w	r3, [r5], #4
 8001228:	4798      	blx	r3
 800122a:	3601      	adds	r6, #1
 800122c:	e7ee      	b.n	800120c <__libc_init_array+0xc>
 800122e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001232:	4798      	blx	r3
 8001234:	3601      	adds	r6, #1
 8001236:	e7f2      	b.n	800121e <__libc_init_array+0x1e>
 8001238:	08001288 	.word	0x08001288
 800123c:	08001288 	.word	0x08001288
 8001240:	08001288 	.word	0x08001288
 8001244:	0800128c 	.word	0x0800128c

08001248 <_init>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	bf00      	nop
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr

08001254 <_fini>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr


Unit5_Sec1_GPIO_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069f  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  0000088f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	for(int i=0;i<=7;i++){
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
		SET_BIT(DDRA,i);
  70:	41 e0       	ldi	r20, 0x01	; 1
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	6a b3       	in	r22, 0x1a	; 26
  76:	9a 01       	movw	r18, r20
  78:	08 2e       	mov	r0, r24
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	22 0f       	add	r18, r18
  7e:	33 1f       	adc	r19, r19
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	26 2b       	or	r18, r22
  86:	2a bb       	out	0x1a, r18	; 26


int main(void)
{
	
	for(int i=0;i<=7;i++){
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	91 05       	cpc	r25, r1
  8e:	91 f7       	brne	.-28     	; 0x74 <main+0x8>
	}
	/* Replace with your application code */
	while (1)
	{
		for(int i=0;i<=7;i++){
			SET_BIT(PORTA,i);
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
		SET_BIT(DDRA,i);
	}
	/* Replace with your application code */
	while (1)
	{
		for(int i=0;i<=7;i++){
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
			SET_BIT(PORTA,i);
  98:	4b b3       	in	r20, 0x1b	; 27
  9a:	9b 01       	movw	r18, r22
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x34>
  a8:	24 2b       	or	r18, r20
  aa:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	31 ee       	ldi	r19, 0xE1	; 225
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
		SET_BIT(DDRA,i);
	}
	/* Replace with your application code */
	while (1)
	{
		for(int i=0;i<=7;i++){
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	91 05       	cpc	r25, r1
  c4:	49 f7       	brne	.-46     	; 0x98 <main+0x2c>
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	91 ee       	ldi	r25, 0xE1	; 225
  ca:	24 e0       	ldi	r18, 0x04	; 4
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	20 40       	sbci	r18, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x60>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x6a>
  d6:	00 00       	nop
			SET_BIT(PORTA,i);
			_delay_ms(200);
		}
		_delay_ms(200);
		
		for(int i=7;i>=0;i--){
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	90 e0       	ldi	r25, 0x00	; 0
			RESET_BIT(PORTA,i);
  dc:	3b b3       	in	r19, 0x1b	; 27
  de:	ab 01       	movw	r20, r22
  e0:	08 2e       	mov	r0, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x7c>
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x78>
  ec:	24 2f       	mov	r18, r20
  ee:	20 95       	com	r18
  f0:	23 23       	and	r18, r19
  f2:	2b bb       	out	0x1b, r18	; 27
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	41 ee       	ldi	r20, 0xE1	; 225
  f8:	24 e0       	ldi	r18, 0x04	; 4
  fa:	31 50       	subi	r19, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x8e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x98>
 104:	00 00       	nop
			SET_BIT(PORTA,i);
			_delay_ms(200);
		}
		_delay_ms(200);
		
		for(int i=7;i>=0;i--){
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	48 f7       	brcc	.-46     	; 0xdc <main+0x70>
 10a:	c4 cf       	rjmp	.-120    	; 0x94 <main+0x28>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>

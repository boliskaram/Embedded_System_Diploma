
Unit5_Sec1_GPIO_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057c  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fd  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a2  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ba  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	RESET_BIT(DDRB,0);
  6c:	b8 98       	cbi	0x17, 0	; 23
	SET_BIT(PORTB,0);
  6e:	c0 9a       	sbi	0x18, 0	; 24
	SET_BIT(DDRA,0);
  70:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,1);
  72:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,2);
  74:	d2 9a       	sbi	0x1a, 2	; 26
	SET_BIT(DDRA,3);
  76:	d3 9a       	sbi	0x1a, 3	; 26
	
	char x=0;
  78:	20 e0       	ldi	r18, 0x00	; 0
    while (1) 
    {
		
		if(READ_BIT(PINB,0) == 0){		
			while(READ_BIT(PINB,0) == 0){
				SET_BIT(PORTA,x);
  7a:	31 e0       	ldi	r19, 0x01	; 1
	char x=0;
	
    while (1) 
    {
		
		if(READ_BIT(PINB,0) == 0){		
  7c:	b0 99       	sbic	0x16, 0	; 22
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
			while(READ_BIT(PINB,0) == 0){
  80:	b0 99       	sbic	0x16, 0	; 22
  82:	0b c0       	rjmp	.+22     	; 0x9a <main+0x2e>
				SET_BIT(PORTA,x);
  84:	93 2f       	mov	r25, r19
  86:	02 2e       	mov	r0, r18
  88:	01 c0       	rjmp	.+2      	; 0x8c <main+0x20>
  8a:	99 0f       	add	r25, r25
  8c:	0a 94       	dec	r0
  8e:	ea f7       	brpl	.-6      	; 0x8a <main+0x1e>
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	89 2b       	or	r24, r25
  94:	8b bb       	out	0x1b, r24	; 27
	
    while (1) 
    {
		
		if(READ_BIT(PINB,0) == 0){		
			while(READ_BIT(PINB,0) == 0){
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fb cf       	rjmp	.-10     	; 0x90 <main+0x24>
				SET_BIT(PORTA,x);
				}
				if(0 <= x && x < 3){
  9a:	23 30       	cpi	r18, 0x03	; 3
  9c:	78 f7       	brcc	.-34     	; 0x7c <main+0x10>
					x++;
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	ed cf       	rjmp	.-38     	; 0x7c <main+0x10>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
